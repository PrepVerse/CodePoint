{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"preface/","title":"Preface","text":"Striver Sheet Solution Striver A2Z DSA Sheet Solution : <code>Code</code> <code>\u2714\ufe0f</code> Step 1: Learn the basics Step 1.1: Things to Know <p>  Action   Problem [Articles, Codes]   Languages  <code>\u2714\ufe0f</code> <code></code>Video Solution <code>\u2714\ufe0f</code> <code></code>User Input-Output <code></code> <code></code> <code>\u2714\ufe0f</code> <code></code>Data Types <code></code> <code></code> <code>\u2714\ufe0f</code> <code></code>If Else Statements <code></code> <code>\u2714\ufe0f</code> <code></code>Switch Statement <code></code> <code>\u2714\ufe0f</code> <code></code>What are Arrays Strings <code></code> <code>\u2714\ufe0f</code> <code></code>For Loops <code></code> <code>\u2714\ufe0f</code> <code></code>While Loops <code></code> <code>\u2714\ufe0f</code> <code></code>Functions <code></code> <code>\u2714\ufe0f</code> <code></code>Time Complexity </p> Step 1.2: Build-up Logical Thinking Pattern Problems <p>  Action   Problem [Articles, Codes]   Languages  <code>\u2714\ufe0f</code> <code></code>Video Solution <code>\u2714\ufe0f</code> <code></code>Pattern-1 <code></code> <code>\u2714\ufe0f</code> <code></code>Pattern-2 <code></code> <code>\u2714\ufe0f</code> <code></code>Pattern-3 <code></code> <code>\u2714\ufe0f</code> <code></code>Pattern-4 <code></code> <code>\u2714\ufe0f</code> <code></code>Pattern-5 <code></code> <code>\u2714\ufe0f</code> <code></code>Pattern-6 <code></code> <code>\u2714\ufe0f</code> <code></code>Pattern-7 <code></code> <code>\u2714\ufe0f</code> <code></code>Pattern-8 <code></code> <code>\u2714\ufe0f</code> <code></code>Pattern-9 <code></code> <code>\u2714\ufe0f</code> <code></code>Pattern-10 <code></code> <code>\u2714\ufe0f</code> <code></code>Pattern-11 <code></code> <code>\u2714\ufe0f</code> <code></code>Pattern-12 <code></code> <code>\u2714\ufe0f</code> <code></code>Pattern-13 <code></code> <code>\u2714\ufe0f</code> <code></code>Pattern-14 <code></code> <code>\u2714\ufe0f</code> <code></code>Pattern-15 <code></code> <code>\u2714\ufe0f</code> <code></code>Pattern-16 <code></code> <code>\u2714\ufe0f</code> <code></code>Pattern-17 <code></code> <code>\u2714\ufe0f</code> <code></code>Pattern-18 <code></code> <code>\u2714\ufe0f</code> <code></code>Pattern-19 <code></code> <code>\u2714\ufe0f</code> <code></code>Pattern-20 <code></code> <code>\u2714\ufe0f</code> <code></code>Pattern-21 <code></code> <code>\u2714\ufe0f</code> <code></code>Pattern-22 <code></code> </p> Step 1.3: C++ STL <p>  Action   Problem [Articles, Codes]   Languages  <code>\u2714\ufe0f</code> <code></code>Video Solution <code>\u2714\ufe0f</code> <code></code>C++ STL <code></code> </p> Step 1.4: Know Basic Maths <p>  Action   Problem [Articles, Codes]   Languages  <code>\u2714\ufe0f</code> <code></code>Video Solution <code>\u2714\ufe0f</code> <code></code>Count Digits <code></code> <code>\u2714\ufe0f</code> <code></code>Reverse a Number <code></code> <code>\u2714\ufe0f</code> <code></code>Check Palindrome <code></code> <code>\u2714\ufe0f</code> <code></code>GCD and LCM <code></code> <code>\u2714\ufe0f</code> <code></code>Armstrong Numbers <code></code> <code>\u2714\ufe0f</code> <code></code>Print all Divisors <code></code> <code>\u2714\ufe0f</code> <code></code>Check for Prime <code></code> </p> Step 1.5: Learn Basic Recursion <p>  Action   Problem [Articles, Codes]   Languages  <code>\u2714\ufe0f</code> <code></code>Video Solution <code>\u2714\ufe0f</code> <code></code>Undestand Recursion <code></code> <code>\u2714\ufe0f</code> <code></code>Print Name N times <code></code> <code>\u2714\ufe0f</code> <code></code>Print 1 to N <code></code> <code>\u2714\ufe0f</code> <code></code>Print N to 1 <code></code> <code>\u2714\ufe0f</code> <code></code>Sum of first N numbers <code></code> <code>\u2714\ufe0f</code> <code></code>Factorial of N numbers <code></code> <code>\u2714\ufe0f</code> <code></code>Reverse an Array <code></code> <code>\u2714\ufe0f</code> <code></code>Check if a string is palindrome or not <code></code> <code>\u2714\ufe0f</code> <code></code>Fibonacci Number <code></code> </p> Step 1.6: Learn Basic Hashing <p>  Action   Problem [Articles, Codes]   Languages  <code>\u2714\ufe0f</code> <code></code>Video Solution <code>\u2714\ufe0f</code> <code></code>Counting Frequencies of Array Elements <code></code> <code>\u2714\ufe0f</code> <code></code>Find the highest/lowest Frequency Element <code></code> </p> Step 2: Learn Important Sorting Techniques Step 2.1: Sorting-I <p>  Action   Problem [Articles, Codes]   Languages  <code>\u274c</code> <code></code>Selection Sort <code></code> <code>\u274c</code> <code></code>Bubble Sort <code></code> <code>\u274c</code> <code></code>Insertion Sort <code></code> </p> Step 2.2: Sorting-II <p>  Action   Problem [Articles, Codes]   Languages  <code>\u274c</code> <code></code>Merge Sort <code></code> <code>\u274c</code> <code></code>Recursive Bubble Sort <code></code> <code>\u274c</code> <code></code>Recursive Insertion Sort <code></code> <code>\u274c</code> <code></code>Quick Sort <code></code> </p> Striver Core SDE Sheet Solution : <code>Theory</code> <code>\u2714\ufe0f</code>  Operating System <p><code></code> Operating System</p> Database Management System Computer Network"},{"location":"about/about/","title":"About","text":"<ul> <li>\ud83d\udd2d I'm a 2022 Graduate and my branch is Computer Science.</li> <li>\ud83c\udf31 I\u2019m currently working as a Python Developer.</li> <li>\ud83d\udc6c I\u2019m looking to collaborate on   Repository.</li> <li> I\u2019m currently learning Project Management Skills.</li> <li>\ud83c\udfaf I\u2019m focusing on Data Science.</li> <li> \u260e\ufe0f How to reach me : \u2b50 Stars \ud83c\udf74 Forks \ud83d\udd14 Open PRs \ud83d\udd15 Close PRs \ud83d\udc68\u200d\ud83d\udcbb Total Languages \ud83d\udc1b Open Issues \ud83d\udd15 Close Issues \ud83d\udcbb Top Language 2021 Aug2021-08-31 Sep2021-09-30 Oct2021-10-31 Nov2021-11-30 Dec2021-12-31 2022 Jan2022-01-31 Feb2022-02-28 Mar2022-03-31 Apr2022-04-30 May2022-05-31 Jun2022-06-30 Jul2022-07-31 Aug2022-08-31 Sep2022-09-30 Oct2022-10-31 Nov2022-11-30 Dec2022-12-31 2023 Jan2023-01-31 Feb2023-02-28 Mar2023-03-31 Apr2023-04-30 May2023-05-31 Jun2023-06-30 Jul2023-07-31 Aug2023-08-31 Old Study Plan New Study Plan Programming Skills I Programming Skills II Programming Skills III Programming Skills 30 Days of JavaScript 30 Days of Pandas Data Structur I Data Structur II Data Structur III Top Interview 150 Top 100 Liked Algorithm I Algorithm II Algorithm III Premium Algo 100 Binary Search I Binary Search II Binary Search III Binary Search Dynamic Programming I Dynamic Programming II Dynamic Programming Dynamic Programming Grandmaster Graph Theory I Graph Theory II Graph Theory Level I Level II Level III LeetCode 75 SQL I SQL II SQL III SQL 50 Advanced SQL 50 34 Gold  1st Rank 8 Silver  2nd-5th Rank 1 Bronze  6th-10th Rank Topic Badge Guided path Badge Special Guided path Badge 15 Sensei <code>Topic:</code> Arrays Strings Matrices (2D Arrays) Sorting Bit Manipulation Linked List Stacks &amp; Queues Heap Greedy Dynamic Programming Binary Search Trees Binary Search Trees Tries Graph 26 Sensei <code>Guided path:</code> Data Structures and Algorithms Basics of C++ Oops in C++ Basics of Python Core Python Essentials Oops in Python Basics of Java Fundamentals of Java Essentials of Core Java Oops in Java Interview Preparation Aptitude Preparation Operating System (OS) Database Management Systems (DBMS) Interview Guide for Product Based Companies Top 150 Interview Puzzles System Design Web/App development Basics of HTML Basics of CSS Basics of JavaScript Basics of React Basics of Angular Basics of Node Fundamentals of React Native Flutter Data Science / Machine Learning Basics of Machine Learning Data Science New Tech Blockchain 2 Sensei <code>Special Guided path:</code> Data Structures and Algorithms Data Structures and Algorithm Competitive programming"},{"location":"about/contributing/","title":"Contributing &amp; Support","text":""},{"location":"about/contributing/#become-a-sponsor","title":"Become a Sponsor","text":"<p>Open source projects take time and money. Help support the project by becoming a sponsor. You can add your support at any tier you feel comfortable with. No amount is too little. We also accept one time contributions via GitHub Sponsors.</p> <p> GitHub Sponsors</p>"},{"location":"learning_resources/CN_Series/preface/","title":"Preface","text":"Coding Ninjas Series (Placement Preparation) Phase 1 1. Aptitude 1.1. Logical Reasoning Module 1 <p>Alphanumeric Series</p> <p>Artificial Language</p>"},{"location":"learning_resources/CN_Series/Phase1/Aptitude/Logical_Reasoning/Module1/Alphanumeric_Series/","title":"Alphanumeric Series","text":""},{"location":"learning_resources/CN_Series/Phase1/Aptitude/Logical_Reasoning/Module1/Alphanumeric_Series/#1-find-the-next-one","title":"1. Find the Next One 2, A, 9, B, 6, C, 13, D, ? (Infosys - 2019) <ul> <li> 9</li> <li> 10</li> <li> E</li> <li> 15</li> </ul>   Explanation <p>In this sequence, a number is followed by an alphabet and vice versa. Let's focus on the number pattern: <pre><code>graph TD\n    A[Start with 2] --&gt;|Add 7| B[2 + 7 = 9]\n    B --&gt;|Subtract 3| C[9 - 3 = 6]\n    C --&gt;|Add 7| D[6 + 7 = 13]\n    D --&gt;|Subtract 3| E[13 - 3 = 10]\n    E --&gt;|Result| F[The next element in the sequence is: 10]\n\n    style A fill:#f00,color:white,font-weight:bold,stroke-width:2px,stroke:yellow\n    style F fill:#00f,color:white,font-weight:bold,stroke-width:2px,stroke:yellow</code></pre></p>","text":"Find the Next One <p>"},{"location":"learning_resources/CN_Series/Phase1/Aptitude/Logical_Reasoning/Module1/Alphanumeric_Series/#2-find-the-next-alphanumeric-code","title":"2. Find the next alphanumeric code   Find the next alphanumeric code <p> 2A11, 2D13, 4G17,? (IBM - 2017) <ul> <li> 12J23</li> <li> 48M29</li> <li> 36I29</li> <li> 8E15</li> </ul>   Explanation <p><pre><code>graph TD\n    Start(2A11) --&gt;|Multiply by 1| Step1(2D13)\n    Step1 --&gt;|Multiply by 2| Step2(4G17)\n    Step2 --&gt;|Multiply by 3| Result(12J23)\n    Start --&gt;|Move letter forward by 3| Step1\n    Step1 --&gt;|Move letter forward by 3| Step2\n    Step2 --&gt;|Move letter forward by 3| Result\n    Start --&gt;|Increase two digits by 2| Step1\n    Step1 --&gt;|Increase two digits by 4| Step2\n    Step2 --&gt;|Increase two digits by 6| Result\n\n    style Start fill:#f00,color:white,font-weight:bold,stroke-width:2px,stroke:yellow\n    style Result fill:#00f,color:white,font-weight:bold,stroke-width:2px,stroke:yellow</code></pre> So, the next element in the sequence is: 12J23</p>","text":""},{"location":"learning_resources/CN_Series/Phase1/Aptitude/Logical_Reasoning/Module1/Alphanumeric_Series/#3-find-the-missing-value","title":"3. Find the missing value   Find the missing value <p> ACE, ?, MOQ, SUW(last term) (Wipro) <ul> <li> GIL</li> <li> EFH</li> <li> GIK</li> <li> FHJ</li> </ul>   Explanation <p><pre><code>graph TD\n    Start(ACE) --&gt;|Move letter forward by 6| Step1(GIK)\n    Step1 --&gt;|Move letter forward by 6| Step2(MOQ)\n    Step2 --&gt;|Move letter forward by | Result(SUW)\n    Start --&gt;|Move letter forward by 6| Step1\n    Step1 --&gt;|Move letter forward by 6| Step2\n    Step2 --&gt;|Move letter forward by 6| Result\n    Start --&gt;|Move letter forward by 6| Step1\n    Step1 --&gt;|Move letter forward by 6| Step2\n    Step2 --&gt;|Move letter forward by 6| Result\n\n    style Start fill:#f00,color:white,font-weight:bold,stroke-width:2px,stroke:yellow\n    style Step1 fill:#00f,color:white,font-weight:bold,stroke-width:2px,stroke:yellow</code></pre> So, the next element in the sequence is: GIK</p>","text":""},{"location":"learning_resources/CN_Series/Phase1/Aptitude/Logical_Reasoning/Module1/Alphanumeric_Series/#4-lowest-digit-product","title":"4. Lowest digit product   Lowest digit product <p> 867 209 242 283 543  Given this series:  When the digits within the number are multiplied with each other, the product of which number is the lowest? <ul> <li> 867</li> <li> 209</li> <li> 242</li> <li> 283</li> </ul>   Explanation <pre><code>graph TD\n    Start(867) --&gt;|Multiply digits: 8 x 6 x 7| Step1(336)\n    Start2(209) --&gt;|Multiply digits: 2 x 0 x 9| Step3(0)\n    Start3(242) --&gt;|Multiply digits: 2 x 4 x 2| Step4(16)\n    Start4(283) --&gt;|Multiply digits: 2 x 8 x 3| Step5(48)\n    Start5(543) --&gt;|Multiply digits: 5 x 4 x 3| Step6(60)\n\n    style Start2 fill:#f00,color:white,font-weight:bold,stroke-width:2px,stroke:yellow\n    style Step3 fill:#00f,color:white,font-weight:bold,stroke-width:2px,stroke:yellow</code></pre>","text":""},{"location":"learning_resources/CN_Series/Phase1/Aptitude/Logical_Reasoning/Module1/Alphanumeric_Series/#5-find-the-character","title":"5. Find the character   Find the character <p> Study the following arrangement carefully and answer the question that follows: S K 6 &amp; Q 2 R * C F 8 E $ G 2 # 4 9 L N 3 U V 5 Y \u03b1 B 7 W 9 Which of the following letters, numbers, or symbols will be third to the left or a fifth of the left? <ul> <li> Q</li> <li> S</li> <li> 6</li> <li> 2</li> </ul>   Explanation <pre><code>graph TD\n    Start(S K 6 &amp; Q 2 R * C F 8 E $ G 2 # 4 9 L N 3 U V 5 Y \u03b1 B 7 W 9) --&gt;|Count 3 to the left| ThirdToLeft(6)\n    ThirdToLeft --&gt;|Count 5 of the left| FifthToLeft(R)\n    ThirdToLeft --&gt;|Check| Answer\n    FifthToLeft --&gt;|Check| Answer\n    Answer --&gt;|Display Result| Result(6)\n\n    style Start fill:#f00,color:white,font-weight:bold,stroke-width:2px,stroke:yellow\n    style Result fill:#00f,color:white,font-weight:bold,stroke-width:2px,stroke:yellow</code></pre>","text":""},{"location":"learning_resources/CN_Series/Phase1/Aptitude/Logical_Reasoning/Module1/Artificial_Language/","title":"Artificial Language","text":""},{"location":"learning_resources/CN_Series/Phase1/Aptitude/Logical_Reasoning/Module1/Artificial_Language/#1-houseguest","title":"1. Houseguest Here are some words translated from an artificial language. morpirquat means birdhouse  beelmorpir means bluebird  beelclak means bluebell  Which word could mean \"houseguest\"? <ul> <li> Morpirhunde</li> <li> Beelmoki</li> <li> Quathunde</li> <li> Clakquat</li> </ul>   Explanation","text":"Houseguest <p>"},{"location":"learning_resources/CN_Series/Phase1/Aptitude/Logical_Reasoning/Module1/Artificial_Language/#2-holiday","title":"2. Holiday   Holiday <p> fenplac means filmy holiday  Placston means holiday beach  Stonrum means beach perform  Rumfen means perform filmy  Which word means \u201choliday\u201d? <ul> <li> plac</li> <li> rum</li> <li> ston</li> <li> fen</li> </ul>   Explanation","text":""},{"location":"learning_resources/CN_Series/Phase1/Aptitude/Logical_Reasoning/Module1/Artificial_Language/#3-lighthouse","title":"3. Lighthouse   Lighthouse <p> Mallonpiml means blue ligh Mallontifl means blueberry Arpantifl means rasberry Which word means \u201clighthouse\u201d? (Tech Mahindra - 2018) <ul> <li> Tiflmallon</li> <li> Pimlarpan</li> <li> Mallonarpan </li> <li> Pimldoken</li> </ul>   Explanation","text":""},{"location":"learning_resources/CN_Series/Phase1/Aptitude/Logical_Reasoning/Module1/Artificial_Language/#4-plantation","title":"4. Plantation   Plantation <p> Creektulo means tree plantation  creekfuos means tree mutation  fuosseed means mutation sapling  Which word means \u201cplantation\u201d?  (Newgen - 2020) <ul> <li> Creek</li> <li> Tulo</li> <li> Fuos</li> <li> Seed</li> </ul>   Explanation","text":""},{"location":"learning_resources/CN_Series/Phase1/Aptitude/Logical_Reasoning/Module1/Artificial_Language/#5-happiness","title":"5. Happiness   Happiness <p> jalkamofti means happy birthday  moftihoze means birthday party  mentogunn means goodness  Which word could mean \"happiness\"? (Sapient - 2019) <ul> <li> jalkagunn</li> <li> Mentohoze</li> <li> Moftihoze</li> <li> hozemento</li> </ul>   Explanation","text":""},{"location":"learning_resources/Free_Courses/Apna_College_Series/DSA/","title":"Free DSA","text":""},{"location":"learning_resources/Free_Courses/Love_Babbar_Series/DSA/","title":"Free DSA","text":""},{"location":"learning_resources/Free_Courses/Striver_Series/DSA/","title":"Free DSA","text":""},{"location":"learning_resources/blog/","title":"Blog","text":""},{"location":"learning_resources/blog/core_subjects/operating-system/","title":"Operating System","text":"1. What is the main purpose of an operating system? Discuss different types? <p>What is the main purpose of an operating system?</p> <p>An operating system (OS) is system software that manages computer hardware, software resources, and provides common services for computer programs. So it manages the computer\u2019s memory, processes, devices, files, and security aspects of the system. It also allows us to communicate with the computer without knowing how to speak the computer\u2019s language. Without an operating system, a computer is not useful.</p> <p>Types of operating system:</p> Batch OS <p>Batch OS</p> Distributed OS <p>Distributed OS</p> Multitasking OS <p>Multitasking OS</p> Network OS <p>Network OS</p> Real-Time OS <p>Real-Time OS</p> Mobile OS <p>Mobile OS</p> 2. What is a socket, kernel and monolithic kernel ? <p>Socket</p> <p>A socket is defined as an endpoint for communication, A pair of processes communicating over a network employ a pair of sockets ,one for each process. A socket is identified by an IP address concatenated with a port number.  The server waits for incoming client requests by listening to a specified port. Once a request is received, the server accepts a connection from the client socket to complete the connection.</p> <p>Kernel</p> <pre><code>Kernel is the central core component of an operating system that manages operations of computer and hardware. Kernel Establishes communication between user level application and hardware. Manages memory and CPU time. Decides state of incoming processes. Controls Disk, Memory, Task Management\n</code></pre> <p>Monolithic Kernel</p> <p>It is one of the types of kernel where all operating system services operate in kernel space. It has dependencies between system components. It has huge lines of code which is complex.</p> <p>Example</p> <p>Unix, Linux, Open VMS, XTS-400 etc.</p> 3. Difference between process and program and thread? Different types of process. <p>Process</p> <p>Process is an instance of an executing program. For example, we write our computer programs in a text file and when we execute this program, it becomes a process which performs all the tasks mentioned in the program.</p> <p>Program</p> <p>Program is a set of instructions to perform a certain task. Eg: chrome.exe, notepad.exe</p> <p>Thread</p> <p>Thread is a path of execution within a process. A thread is also known as a lightweight process. The idea is to achieve parallelism by dividing a process into multiple threads. For example,Word processor uses multiple threads: one thread to format the text, another thread to process inputs.</p> 4. Define virtual memory, thrashing, threads. <p>Virtual Memory</p> <p>A computer can address more memory than the amount physically installed on the system. This extra memory is actually called virtual memory and it is a section of a hard disk that\u2019s set up to emulate the computer\u2019s RAM. The main visible advantage of this scheme is that programs can be larger than physical memory. Virtual memory serves two purposes. First, it allows us to extend the use of physical memory by using a disk. Second, it allows us to have memory protection, because each virtual address is translated to a physical address.</p> <p>Thrashing</p> <p>Thrashing is a condition or a situation when the system is spending a major portion of its time in servicing the page faults, but the actual processing done is very negligible. High degree of multiprogramming(if number of processes keeps on increasing in the memory), lack of frames (if a process is allocated too few frames, then there will be too many and too frequent page faults) causes Thrashing.</p> <p>Threads</p> <p>A thread is a single sequential flow of execution of tasks of a process so it is also known as thread of execution or thread of control.</p> 5. What is RAID ? Different types. <p>RAID</p> <p>RAID, or \u201cRedundant Arrays of Independent Disks\u201d is a technique which makes use of a combination of multiple disks instead of using a single disk for increased performance, data redundancy or both.Data redundancy, although taking up extra space, adds to disk reliability. This means, in case of disk failure, if the same data is also backed up onto another disk, we can retrieve the data and go on with the operation.</p> 6. What is a deadlock? Different conditions to achieve a deadlock. <p>What is a deadlock</p> <p>A Deadlock is a situation where each of the computer processes waits for a resource which is being assigned to some other process. In this situation, none of the processes gets executed since the resource it needs is held by some other process which is also waiting for some other resource to be released.</p> <p>How deadlock is achieved</p> <p>Deadlock happens when Mutual exclusion, hold and wait, No preemption and circular wait occurs simultaneously.</p> <p>Necessary Conditions for deadlock</p> Mutual Exclusion <p>Mutual Exclusion</p> Hold and Wait <p>Hold and Wait</p> No preemption <p>No preemption</p> Circular Wait <p>Circular Wait</p> 7. What is fragmentation? Types of fragmentation. <p>Fragmentation</p> <p>An unwanted problem in the operating system in which the processes are loaded and unloaded from memory, and free memory space is fragmented. Processes can\u2019t be assigned to memory blocks due to their small size, and the memory blocks stay unused. It is also necessary to understand that as programs are loaded and deleted from memory, they generate free space or a hole in the memory. These small blocks cannot be allotted to new arriving processes, resulting in inefficient memory use.</p> <p>The conditions of fragmentation depend on the memory allocation system. As the process is loaded and unloaded from memory, these areas are fragmented into small pieces of memory that cannot be allocated to incoming processes. It is called fragmentation.</p> <p>Types of fragmentation</p> Internal <p>Internal</p> External <p>External</p> 8. What is spooling ? <p>Spooling</p> <p>SPOOL is an acronym for simultaneous peripheral operations online. Spooling is a process in which data is temporarily held to be used and executed by a device, program, or system.</p> <p>In spooling, there is no interaction between the I/O devices and the CPU. That means there is no need for the CPU to wait for the I/O operations to take place. Such operations take a long time to finish executing, so the CPU will not wait for them to finish.</p> <p>The biggest example of Spooling is printing. The documents which are to be printed are stored in the SPOOL and then added to the queue for printing. During this time, many processes can perform their operations and use the CPU without waiting while the printer executes the printing process on the documents one-by-one.</p> 9. What is semaphore and mutex (Differences might be asked)? Define Binary semaphore. <p>Semaphore</p> <p>Semaphore is simply a variable that is non-negative and shared between threads. A semaphore is a signaling mechanism, and a thread that is waiting on a semaphore can be signaled by another thread. </p> It uses two atomic operations <p>1) wait, </p> <p>2) signal </p> <p>for the process synchronization.</p> <p>A semaphore either allows or disallows access to the resource, which depends on how it is set up.</p> <p>Mutex</p> <p>The full form of Mutex is Mutual Exclusion Object. It is a special type of binary semaphore which used for controlling access to the shared resource. It includes a priority inheritance mechanism to avoid extended priority inversion problems. It allows current higher priority tasks to be kept in the blocked state for the shortest time possible. However, priority inheritance does not correct priority- inversion but only minimizes its effect.</p> 10. Belady\u2019s Anomaly <p>Belady\u2019s Anomals</p> <p>Belady\u2019s anomaly is the name given to the phenomenon where increasing the number of page frames results in an increase in the number of page faults for a given memory access pattern.</p> <p>Solution to fix Belady\u2019s Anomaly</p> <p>Implementing alternative page replacement algo helps eliminate Belady\u2019s Anomaly.. Use of stack based algorithms, such as Optimal Page Replacement Algorithm and Least Recently Used (LRU) algorithm, can eliminate the issue of increased page faults as these algorithms assign priority to pages</p> 11. Starving and Aging in OS <p>Starving/Starvation(also called Lived lock)</p> <p>Starvation is the problem that occurs when low priority processes get jammed for an unspecified time as the high priority processes keep executing. So starvation happens if a method is indefinitely delayed.</p> <p>Solution to Starvation</p> <p>Ageing is a technique of gradually increasing the priority of processes that wait in the system for a long time.</p> 12. Why does trashing occur? <p>High degree of multiprogramming(if number of processes keeps on increasing in the memory) , lack of frames(if a process is allocated too few frames, then there will be too many and too frequent page faults.) causes Thrashing.</p> 13. What is paging and why do we need it? <p>Paging</p> <p>Paging is a memory management scheme that eliminates the need for contiguous allocation of physical memory. This scheme permits the physical address space of a process to be non \u2013 contiguous.</p> <p>Why do we need it</p> <p>Paging is used for faster access to data. When a program needs a page, it is available in the main memory(RAM) as the OS copies a certain number of pages from your storage device to main memory. Paging allows the physical address space of a process to be noncontiguous.</p> 14. Demand Paging, Segmentation <p>Demand Paging</p> <p>Demand paging is a method of virtual memory management which is based on the principle that pages should only be brought into memory if the executing process demands them. This is often referred to as lazy evaluation as only those pages demanded by the process are swapped from secondary storage to main memory.</p> <p>So demand paging works opposite to the principle of loading all pages immediately.</p> <p>Segmentation</p> <p>Segmentation is a memory management technique in which the memory is divided into the variable size parts. Each part is known as a segment which can be allocated to a process.</p> <p>The details about each segment are stored in a table called a segment table. Segment table is stored in one (or many) of the segments.</p> <p>Segment table contains mainly two information about segment</p> Base <p>It is the base address of the segment</p> Limit <p>It is the length of the segment.</p> 15. Real Time Operating System, types of RTOS. <p>RTOS</p> <p>A real-time operating system (RTOS) is a special-purpose operating system used in computers that has strict time constraints for any job to be performed and is intended to serve real time applications that possess data as it comes in , typically without buffer delays.</p> <p>Types of RTOS</p> Hard RTOS <p>Hard RTOS</p> Firm RTOS <p>Firm RTOS</p> Soft RTOS <p>Soft RTOS</p> 16. Difference between main memory and secondary memory. <p>Primary / Main memory</p> <p>Primary memory is the computer memory that is directly accessible by CPU. It is comprised of DRAM and provides the actual working space to the processor. It holds the data and instructions that the processor is currently working on. </p> <p>Secondary Memory / Mass Storage</p> <p>The contents of the secondary memory first get transferred to the primary memory and then are accessed by the processor, this is because the processor does not directly interact with the secondary memory</p> 17. Static Binding, Dynamic Binding <p>Static binding happens when the code is compiled, while dynamic bind happens when the code is executed at run time.</p> <p>Static Binding</p> <p>When a compiler acknowledges all the information required to call a function or all the values of the variables during compile time, it is called \u201cstatic binding\u201d. As all the required information is known before runtime, it increases the program efficiency and it also enhances the speed of execution of a program. Static Binding makes a program very efficient, but it declines the program flexibility, as \u2018values of variable\u2019 and \u2018function calling\u2019 are predefined in the program. Static binding is implemented in a program at the time of coding. Overloading a function or an operator is the example of compile time polymorphism i.e. static binding.</p> <p>Dynamic Binding</p> <p>Dynamic Binding Calling a function or assigning a value to a variable, at run-time is called \u201cDynamic Binding\u201d. Dynamic binding can be associated with run time \u2018polymorphism\u2019 and \u2018inheritance\u2019 in OOP. Dynamic binding makes the execution of a program flexible as it can decide what value should be assigned to the variable and which function should be called, at the time of program execution. But as this information is provided at run time it makes the execution slower as compared to static binding.</p> 18. FCFS Scheduling <p>First Come First Serve (FCFS) Scheduling</p> <p>First Come First Serve (FCFS) is an operating system scheduling algorithm that automatically executes queued requests and processes in order of their arrival. It is the easiest and simplest CPU scheduling algorithm. In this type of algorithm, processes which requests the CPU first get the CPU allocation first. This is managed with a FIFO queue. The full form of FCFS is First Come First Serve.</p> <p>As the process enters the ready queue, its PCB (Process Control Block) is linked with the tail of the queue and, when the CPU becomes free, it should be assigned to the process at the beginning of the queue.</p> 19. SJF Scheduling <p>Shortest Job First (SJF) Scheduling</p> <p>Shortest Job First (SJF) is an algorithm in which the process having the smallest execution time is chosen for the next execution. This scheduling method can be preemptive or non-preemptive. It significantly reduces the average waiting time for other processes awaiting execution. The full form of SJF is Shortest Job First.</p> There are basically two types of SJF methods <p>Non-Preemptive SJF</p> <p>Non-Preemptive SJF</p> <p>Preemptive SJF</p> <p>Preemptive SJF</p> 20. SRTF Scheduling <p>SRTF Scheduling</p> <p>SRTF Scheduling is a preemptive version of SJF scheduling. In SRTF, the execution of the process can be stopped after a certain amount of time. At the arrival of every process, the short term scheduler schedules the process with the least remaining burst time among the list of available processes and the running process.</p> 21. LRTF Scheduling <p>LRTF Scheduling</p> <p>This is a preemptive version of Longest Job First (LJF) scheduling algorithm. In this scheduling algorithm, we find the process with the maximum remaining time and then process it. We check for the maximum remaining time after some interval of time(say 1 unit each) to check if another process having more Burst Time arrived up to that time.</p> 22. Priority Scheduling <p>Priority Scheduling</p> <p>Priority Scheduling is a method of scheduling processes that is based on priority. In this algorithm, the scheduler selects the tasks to work as per the priority.</p> <p>The processes with higher priority should be carried out first, whereas jobs with equal priorities are carried out on a round-robin or FCFS basis. Priority depends upon memory requirements, time requirements, etc.</p> 23. Round Robin Scheduling <p>Round Robin Scheduling</p> <p>In Round-robin scheduling, each ready task runs turn by turn only in a cyclic queue for a limited time slice. This algorithm also offers starvation free execution of processes. Widely used preemptive scheduling method in traditional OS. All the jobs get a fair allocation of CPU. Cons include : Finding a correct time quantum is a quite difficult task in this system, Round-robin scheduling doesn\u2019t give special priority to more important tasks.</p> 24. Producer Consumer Problem <p>About Producer-Consumer problem</p> <p>The Producer-Consumer problem is a classic problem that is used for multi-process synchronisation i.e. synchronisation between more than one processes.</p> <p>The job of the Producer is to generate the data, put it into the buffer, and again start generating data. While the job of the Consumer is to consume the data from the buffer.</p> <p>What\u2019s the problem here?</p> The following are the problems that might occur in the Producer-Consumer <p>The producer should produce data only when the buffer is not full. If the buffer is full, then the producer shouldn\u2019t be allowed to put any data into the buffer.</p> <p>The consumer should consume data only when the buffer is not empty. If the buffer is empty, then the consumer shouldn\u2019t be allowed to take any data from the buffer.</p> <p>The producer and consumer should not access the buffer at the same time.</p> <p>We can solve this problem by using semaphores.</p> 25. Banker\u2019s Algorithm <p>Banker\u2019s Algorithm</p> <p>It is a banker algorithm used to avoid deadlock and allocate resources safely to each process in the computer system. The \u2018S-State\u2019 examines all possible tests or activities before deciding whether the allocation should be allowed to each process. It also helps the operating system to successfully share the resources between all the processes. The banker\u2019s algorithm is named because it checks whether a person should be sanctioned a loan amount or not to help the bank system safely simulate allocation resources.</p> 26. Explain Cache <p>Cache</p> <p>Cache memory is an extremely fast memory type that acts as a buffer between RAM and the CPU. It holds frequently requested data and instructions so that they are immediately available to the CPU when needed.</p> 27. Difference between direct mapping, associative mapping and set-associative mapping <p>Direct Mapping</p> <p>In direct mapping cache, instead of storing total address information with data in cache only part of address bits is stored along with data. The new data has to be stored only in a specified cache location as per the mapping rule for direct mapping. So it doesn't need replacement algorithm.</p> <p>Associative Mapping</p> <p>In associative mapping both the address and data of the memory word are stored. The associative mapping method used by cache memory is very flexible one as well as very fast. This mapping method is also known as fully associative cache.</p> <p>Set-Associative Mapping</p> <p>In Set-Associative cache memory two or more words can be stored under the same index address.  Here every data word is stored along with its tag. The number of tag-data words under an index is said to form a text.</p> 28. Difference between multitasking and multiprocessing <p>Multi-tasking</p> <p>Multi-tasking is the logical extension of multiprogramming. In this system, the CPU executes multiple jobs by switching among them typically using a small time quantum, and these switches occur so frequently that the users can interact with each program while it is running. Multitasking is further classified into two categories: Single User &amp; Multiuser. </p> <p>Multiprocessing</p> <p>Multiprocessing is a system that has two or more than two processors. In this, CPUs are added for increasing computing speed of the system. Because of Multiprocessing, there are many processes that are executed simultaneously. Multiprocessing is further classified into two categories: Symmetric Multiprocessing and Asymmetric Multiprocessing. </p>","tags":["Core Subject","OS"]},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/Data-Types/","title":"Data Types","text":"C++Python <p>Data_Types.cpp</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    // Integer types\n    int i = 10; // int\n    long l = 1005; // long\n    long long ll = 10000005; // long long\n\n    // Floating-point types\n    float f = 10.5; // float\n    float fi = 10; // float (integer value)\n\n    double d = 1005.5; // double\n    double di = 1005; // double (integer value)\n\n    // String input and output\n    string s1, s2;\n    cin &gt;&gt; s1 &gt;&gt; s2;\n    cout &lt;&lt; \"Print normal string: \" &lt;&lt; endl;\n    cout &lt;&lt; \"s1: \" &lt;&lt; s1 &lt;&lt; \", and s2: \" &lt;&lt; s2 &lt;&lt; endl &lt;&lt; endl;\n\n    // Reading a line of text\n    string str;\n    getline(cin, str);\n    cout &lt;&lt; \"Print getline string: \" &lt;&lt; endl;\n    cout &lt;&lt; \"str: \" &lt;&lt; str;\n\n    // Character types\n    char ch = 'A'; // char\n    string s = \"A\"; // string containing a single character\n\n    return 0;\n}\n</code></pre> <p>Input: Akash Singh  Output: Print normal string:  s1: Akash, and s2: Singh </p> <p>Input: My Name is Akash Singh.  Output: Print getline string:  str: My Name is Akash Singh.</p> <p>Data_Types.py</p> <pre><code># Integer variables\ni = 10  # An integer variable i with the value 10\nl = 1005  # A long integer variable l with the value 1005\nll = 10000005  # A long long integer variable ll with the value 10000005\n\n# Floating-point variables\nf = 10.5  # A float variable f with the value 10.5\nfi = 10  # Another float variable fi with the value 10 (integer value)\n\nd = 1005.5  # A double variable d with the value 1005.5\ndi = 1005  # Another double variable di with the value 1005 (integer value)\n\n# String input and output\ns1 = input()  # Read a string into s1 from user input\ns2 = input()  # Read another string into s2 from user input\nprint(\"Print normal string: \")\nprint(\"s1:\", s1, \", and s2:\", s2)\nprint()\n\n# Reading a line of text\nstr = input()  # Read a line of text into the variable str from user input\nprint(\"Print getline string: \")\nprint(\"str:\", str)\n\n# Character variables\nch = 'A'  # A character variable ch with the value 'A'\ns = \"A\"  # A string variable s containing the character 'A'\n</code></pre> <p>Input: Akash  Singh  Output: Print normal string:  s1: Akash, and s2: Singh </p> <p>Input: My Name is Akash Singh.  Output: Print getline string:  str: My Name is Akash Singh.</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/For-Loops/","title":"For Loops","text":"<pre><code>graph LR\n\n  A(Start) --&gt; B[Initialize Variables];\n  B --&gt; C{Condition};\n  C --&gt; |True| D[Execute Loop Body];\n  D --&gt; E[Update Variables];\n  E --&gt; C;\n  C --&gt; |False| F(End);\n\n  style A fill:#f00,color:white,font-weight:bold,stroke-width:2px,stroke:yellow\n  style F fill:#00f,color:white,font-weight:bold,stroke-width:2px,stroke:yellow\n\n  subgraph Initialize_Variables\n    B[Initialization]\n  end\n\n  subgraph Condition\n    C{Condition}\n  end\n\n  subgraph Execute_Loop_Body\n    D[Loop Body]\n  end\n\n  subgraph Update_Variables\n    E[Update]\n  end\n\n  style Initialize_Variables fill:##FC33FF,stroke:#FF6E40,stroke-width:5px;\n  style Condition fill:##FC33FF,stroke:#F6fE40,stroke-width:5px;\n  style Execute_Loop_Body fill:##FC33FF,stroke:#3A9D23,stroke-width:5px;\n  style Update_Variables fill:##FC33FF,stroke:#4D5BFF,stroke-width:5px;\n</code></pre> C++ <p>Sum of 10 Numbers.cpp</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    int sum=0;\n    for(int i=1; i&lt;=10; i++) {\n        sum += i;\n    }   \n    cout &lt;&lt; sum;\n}\n</code></pre> <p>Output: 55</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/Functions/","title":"Functions","text":"<p>Use of functions</p> <ol> <li>Functions are set of code wich performs somethig for you</li> <li>Functions are used to modularised code</li> <li>Functions are used to increase readability</li> <li>Functions are used to use same code multiple times</li> </ol> <p>Type of functions</p> <ol> <li>void \u2192 which does not return annything</li> <li>parameterised</li> <li>non parameterised</li> <li>return</li> <li>Pass by Value</li> <li>Pass by Refrence</li> </ol>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/Functions/#void-non_parameterised","title":"Void - Non_Parameterised","text":"C++ <p>Void_Function.cpp</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid printName() {\n    cout &lt;&lt; \"Akash Singh\";\n}\n\nint main() {\n    printName();\n    return 0;\n}\n</code></pre> <p>Output: Akash Singh</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/Functions/#void-parameterised","title":"Void - Parameterised","text":"C++ <p>Parameterised_Function.cpp</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid printName(string name) {\n    cout &lt;&lt; \"Hello \" &lt;&lt; name;\n}\n\nint main() {\n    string name;\n    cin &gt;&gt; name;\n    printName(name);\n    return 0;\n}\n</code></pre> <p>Input: Akash  Output: Hello Akash</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/Functions/#return-parameterised","title":"Return - Parameterised","text":"C++ <p>Return_Function.cpp</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint Sum(int num1, int num2) {\n    int sum = num1 + num2;\n    return sum;\n}\n\nint main() {\n    int num1, num2;\n    cin &gt;&gt; num1 &gt;&gt; num2;\n    cout &lt;&lt; Sum(num1, num2);\n    return 0;\n}\n</code></pre> <p>Input:  5 6  Output: 11</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/Functions/#pass-by-value","title":"Pass by Value","text":"C++ <p>Pass_by_Value.cpp</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid AddFive(int num) {\n    cout &lt;&lt; \"num\" &lt;&lt; endl;\n    num += 5;\n    cout &lt;&lt; \"num\" &lt;&lt; endl;\n    num += 5;\n    cout &lt;&lt; \"num\" &lt;&lt; endl;\n}\n\nint main() {\n    int num;\n    cin &gt;&gt; num;\n    AddFive(num);\n    cout &lt;&lt; num;\n    return 0;\n}\n</code></pre> <p>Input: 10  Output: 15  20  10</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/Functions/#pass-by-refrence","title":"Pass by Refrence","text":"C++ <p>Pass_by_Refrence.cpp</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid AddFive(int &amp;num) {\n    cout &lt;&lt; \"num\" &lt;&lt; endl;\n    num += 5;\n    cout &lt;&lt; \"num\" &lt;&lt; endl;\n    num += 5;\n    cout &lt;&lt; \"num\" &lt;&lt; endl;\n}\n\nint main() {\n    int num;\n    cin &gt;&gt; num;\n    AddFive(num);\n    cout &lt;&lt; num;\n    return 0;\n}\n</code></pre> <p>Input: 10  Output: 15  20  20</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/If-Else-Statements/","title":"If Else Statements","text":"<pre><code>graph LR\n\n  A(Start) --&gt; B[Initialize Variables];\n  B --&gt; C{Condition};\n  C -- Yes --&gt; D[Execute If Block];\n  C -- No --&gt; E[Execute Else Block];\n  D --&gt; F[Display Result];\n  E --&gt; F;\n  F --&gt; G(End);\n\n  style A fill:#f00,color:white,font-weight:bold,stroke-width:2px,stroke:yellow\n  style G fill:#00f,color:white,font-weight:bold,stroke-width:2px,stroke:yellow\n\n  subgraph Initialize_Variables\n    B[Variables]\n  end\n\n  subgraph Condition\n    C{Condition}\n  end\n\n  subgraph Execute_If_Block\n    D[Execute If Block]\n  end\n\n  subgraph Execute_Else_Block\n    E[Execute Else Block]\n  end\n\n  subgraph Display_Result\n    F[Display Result]\n  end\n\n  style Initialize_Variables fill:##FC33FF,stroke:#FF6E40,stroke-width:5px;\n  style Condition fill:##FC33FF,stroke:#045F7F,stroke-width:5px;\n  style Execute_If_Block fill:##FC33FF,stroke:#3A9D23,stroke-width:5px;\n  style Execute_Else_Block fill:##FC33FF,stroke:#4D5BFF,stroke-width:5px;\n  style Display_Result fill:##FC33FF,stroke:#FF406A,stroke-width:5px;\n</code></pre> <p>Example</p> <p>Problem</p> <pre><code>Take the age from user and then decide accordingly\n1.  if age &lt; 18.\n    print --&gt; You are not eligible for job.\n2.  if age &gt;= 18 and age &lt;= 54.\n    print --&gt; You are eligible for job.\n3.  if age &gt;= 55 and age &lt;= 57.\n    print --&gt; You are eligible for job, but retirement soon.\n4.  if age &gt; 57.\n    print --&gt; Retirement time.            \n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/If-Else-Statements/#method-1","title":"Method-1","text":"C++ <p>If_Else.cpp</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    int age;\n    cin &gt;&gt; age;\n\n    if(age &lt; 18) {\n        cout &lt;&lt; \"You are not eligible for job.\";\n    }\n    if(age &gt;= 18 and age &lt;= 54) {\n        cout &lt;&lt; \"You are eligible for job.\";\n    }\n    if(age &gt;= 55 and age &lt;= 57) {\n        cout &lt;&lt; \"You are eligible for job, but retirement soon.\";\n    }\n    if(age &gt; 57) {\n        cout &lt;&lt; \"Retirement time.\";\n    }\n    return 0;\n}\n</code></pre> <p>Input: 22  Output: You are eligible for job.</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/If-Else-Statements/#method-2","title":"Method-2","text":"C++ <p>If_Else.cpp</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    int age;\n    cin &gt;&gt; age;\n\n    if(age &lt; 18) {\n        cout &lt;&lt; \"You are not eligible for job.\";\n    }\n    else if(age &lt;= 54) {\n        cout &lt;&lt; \"You are eligible for job.\";\n    }\n    else if(age &lt;= 57) {\n        cout &lt;&lt; \"You are eligible for job, but retirement soon.\";\n    }\n    else if(age &gt; 57) {\n        cout &lt;&lt; \"Retirement time.\";\n    }\n    return 0;\n}\n</code></pre> <p>Input: 22  Output: You are eligible for job.</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/If-Else-Statements/#method-3","title":"Method-3","text":"C++ <p>If_Else.cpp</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    int age;\n    cin &gt;&gt; age;\n\n    if(age &lt; 18) {\n        cout &lt;&lt; \"You are not eligible for job.\";\n    }\n    else if(age &lt;= 54) {\n        cout &lt;&lt; \"You are eligible for job.\";\n    }\n    else if(age &lt;= 57) {\n        cout &lt;&lt; \"You are eligible for job, but retirement soon.\";\n    }\n    else {\n        cout &lt;&lt; \"Retirement time.\";\n    }\n    return 0;\n}\n</code></pre> <p>Input: 22  Output: You are eligible for job.</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/If-Else-Statements/#method-4","title":"Method-4","text":"C++ <p>If_Else.cpp</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    int age;\n    cin &gt;&gt; age;\n\n    if(age &lt; 18) {\n        cout &lt;&lt; \"You are not eligible for job.\";\n    }\n    else if(age &lt;= 57) {\n        cout &lt;&lt; \"You are eligible for job\";\n        if(age &gt;= 55) {\n            cout &lt;&lt; \", but retirement soon.\";\n        }\n    }\n    else {\n        cout &lt;&lt; \"Retirement time.\";\n    }\n    return 0;\n}\n</code></pre> <p>Input: 22  Output: You are eligible for job.</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/Switch-Statement/","title":"Switch Statement","text":"<pre><code>graph LR\n  A(Start) --&gt; B[Expression];\n  B --&gt; C1{Case 1};\n  C1 --&gt; |Match| S1[Statement 1];\n  S1 --&gt; B1[break];\n  B1 --&gt; I[End];\n  C1 --&gt; |Unmached| C2{Case 2};\n  C2 --&gt; |Match| S2[Statement 2];\n  S2 --&gt; B2[break];\n  B2 --&gt; I[End];\n  C2 --&gt; |Unmached| C3{Case 3};\n  C3 --&gt; |Match| S3[Statement 3];\n  S3 --&gt; B3[break];\n  B3 --&gt; I[End];\n  C3 --&gt; |Unmached| Cn{Case n};\n  Cn --&gt; |Match| Sn[Statement n];\n  Sn --&gt; Bn[break];\n  Bn --&gt; I[End];\n  Cn --&gt; |Unmached| De[Default];\n  De --&gt; Sd[Default Statement];\n  Sd --&gt; Bd[break];\n  Bd --&gt; I[End];\n\n  style A fill:#f00,color:white,font-weight:bold,stroke-width:2px,stroke:yellow\n  style I fill:#00f,color:white,font-weight:bold,stroke-width:2px,stroke:yellow\n\n  subgraph Switch_Number\n    B[Switch Number]\n  end\n\n  subgraph Case_1\n    C1{Case 1}\n  end\n\n  subgraph Case_2\n    C2{Case 2}\n  end\n\n  subgraph Case_3\n    C3{Case 3}\n  end\n\n  subgraph Case_n\n    Cn{Case n}\n  end\n\n  subgraph Default\n    De{Default}\n  end\n\n  subgraph Statement_Group_1\n    S1[Statement Group 1]\n  end\n\n  subgraph Statement_Group_2\n    S2[Statement Group 2]\n  end\n\n  subgraph Statement_Group_3\n    S3[Statement Group 3]\n  end\n\n  subgraph Statement_Group_n\n    Sn[Statement Group n]\n  end\n\n  subgraph Default_Statement_Group\n    Sd[Default Statement Group]\n  end\n\n  style Switch_Number fill:##FC33FF,stroke:#FF6E40,stroke-width:5px;\n  style Case_1 fill:##FC33FF,stroke:#3A9D23,stroke-width:5px;\n  style Case_2 fill:##FC33FF,stroke:#3A9D23,stroke-width:5px;\n  style Case_3 fill:##FC33FF,stroke:#3A9D23,stroke-width:5px;\n  style Case_n fill:##FC33FF,stroke:#3A9D23,stroke-width:5px;\n  style Default fill:##FC33FF,stroke:#3A9D23,stroke-width:5px;\n  style Statement_Group_1 fill:##FC33FF,stroke:#4D5BFF,stroke-width:5px;\n  style Statement_Group_2 fill:##FC33FF,stroke:#4D5BFF,stroke-width:5px;\n  style Statement_Group_3 fill:##FC33FF,stroke:#4D5BFF,stroke-width:5px;\n  style Statement_Group_n fill:##FC33FF,stroke:#4D5BFF,stroke-width:5px;\n  style Default_Statement_Group fill:##FC33FF,stroke:#4D5BFF,stroke-width:5px;\n</code></pre> <p>Problem</p> <pre><code>Take the day number and print the corresponding day\nfor 1 print Monday\nfor 2 print Tuesday and so on for 7 print Sunday           \n</code></pre> C++ <p>Switch.cpp</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    int day;\n    cin &gt;&gt; day;\n\n    switch(day) {\n        case 1:\n            cout &lt;&lt; \"Monday\";\n            break;\n        case 2:\n            cout &lt;&lt; \"Tuesday\";\n            break;\n        case 3:\n            cout &lt;&lt; \"Wednesday\";\n            break;\n        case 4:\n            cout &lt;&lt; \"Thursday\";\n            break;\n        case 5:\n            cout &lt;&lt; \"Friday\";\n            break;\n        case 6:\n            cout &lt;&lt; \"Saturday\";\n            break;\n        case 7:\n            cout &lt;&lt; \"Sunday\";\n            break;\n        default:\n            cout &lt;&lt; \"Invalid\";\n    }\n    cout &lt;&lt; \" Check\";\n    return 0;\n}\n</code></pre> <p>Input: 4  Output: Thursday Check </p> <p>Input: 8  Output: Invalid Check</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/Time-Complexity/","title":"Time Complexity","text":"Credit : Big-O Cheat Cheat"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/Time-Complexity/#chartTitle","title":"Big-O Complexity Chart","text":"<code>Horrible</code> <code>Bad</code> <code>Fair</code> <code>Good</code> <code>Excellent</code> O(log n), O(1) O(n) O(n log n) O(n^2) O(2^n) O(n!) Operations Elements"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/Time-Complexity/#algo","title":"Common Time Complexities","text":"Name   Time Complexity  Constant Time <code>O(1)</code> Logarithmic Time <code>O(log(n))</code> Linear Time <code>O(n)</code> Quasilinear Time <code>O(nlog(n))</code> Quadratic Time <code>O(n^2)</code> Exponential Time <code>O(2^n)</code> Factorial Time <code>O(n!)</code>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/Time-Complexity/#data-structures","title":"Common Data Structure Operations","text":"Data Structure Time Complexity Space Complexity Average Worst Worst Access Search Insertion Deletion Access Search Insertion Deletion Array <code>\u0398(1)</code> <code>\u0398(n)</code> <code>\u0398(n)</code> <code>\u0398(n)</code> <code>O(1)</code> <code>O(n)</code> <code>O(n)</code> <code>O(n)</code> <code>O(n)</code> Singly-Linked List <code>\u0398(n)</code> <code>\u0398(n)</code> <code>\u0398(1)</code> <code>\u0398(1)</code> <code>O(n)</code> <code>O(n)</code> <code>O(1)</code> <code>O(1)</code> <code>O(n)</code> Doubly-Linked List <code>\u0398(n)</code> <code>\u0398(n)</code> <code>\u0398(1)</code> <code>\u0398(1)</code> <code>O(n)</code> <code>O(n)</code> <code>O(1)</code> <code>O(1)</code> <code>O(n)</code> Skip List <code>\u0398(log(n))</code> <code>\u0398(log(n))</code> <code>\u0398(log(n))</code> <code>\u0398(log(n))</code> <code>O(n)</code> <code>O(n)</code> <code>O(n)</code> <code>O(n)</code> <code>O(n log(n))</code> Hash Table <code>N/A</code> <code>\u0398(1)</code> <code>\u0398(1)</code> <code>\u0398(1)</code> <code>N/A</code> <code>O(n)</code> <code>O(n)</code> <code>O(n)</code> <code>O(n)</code> Stack <code>\u0398(n)</code> <code>\u0398(n)</code> <code>\u0398(1)</code> <code>\u0398(1)</code> <code>O(n)</code> <code>O(n)</code> <code>O(1)</code> <code>O(1)</code> <code>O(n)</code> Queue <code>\u0398(n)</code> <code>\u0398(n)</code> <code>\u0398(1)</code> <code>\u0398(1)</code> <code>O(n)</code> <code>O(n)</code> <code>O(1)</code> <code>O(1)</code> <code>O(n)</code> B-Tree <code>\u0398(log(n))</code> <code>\u0398(log(n))</code> <code>\u0398(log(n))</code> <code>\u0398(log(n))</code> <code>O(log(n))</code> <code>O(log(n))</code> <code>O(log(n))</code> <code>O(log(n))</code> <code>O(n)</code> Binary Search Tree <code>\u0398(log(n))</code> <code>\u0398(log(n))</code> <code>\u0398(log(n))</code> <code>\u0398(log(n))</code> <code>O(n)</code> <code>O(n)</code> <code>O(n)</code> <code>O(n)</code> <code>O(n)</code> Red-Black Tree <code>\u0398(log(n))</code> <code>\u0398(log(n))</code> <code>\u0398(log(n))</code> <code>\u0398(log(n))</code> <code>O(log(n))</code> <code>O(log(n))</code> <code>O(log(n))</code> <code>O(log(n))</code> <code>O(n)</code> Splay Tree <code>N/A</code> <code>\u0398(log(n))</code> <code>\u0398(log(n))</code> <code>\u0398(log(n))</code> <code>N/A</code> <code>O(log(n))</code> <code>O(log(n))</code> <code>O(log(n))</code> <code>O(n)</code> AVL Tree <code>\u0398(log(n))</code> <code>\u0398(log(n))</code> <code>\u0398(log(n))</code> <code>\u0398(log(n))</code> <code>O(log(n))</code> <code>O(log(n))</code> <code>O(log(n))</code> <code>O(log(n))</code> <code>O(n)</code> Cartesian Tree <code>N/A</code> <code>\u0398(log(n))</code> <code>\u0398(log(n))</code> <code>\u0398(log(n))</code> <code>N/A</code> <code>O(n)</code> <code>O(n)</code> <code>O(n)</code> <code>O(n)</code> KD Tree <code>\u0398(log(n))</code> <code>\u0398(log(n))</code> <code>\u0398(log(n))</code> <code>\u0398(log(n))</code> <code>O(n)</code> <code>O(n)</code> <code>O(n)</code> <code>O(n)</code> <code>O(n)</code>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/Time-Complexity/#algo","title":"Array Sorting Algorithms","text":"Algorithm Time Complexity Space Complexity Best Average Worst Worst Bubble Sort <code>\u03a9(n)</code> <code>\u0398(n^2)</code> <code>O(n^2)</code> <code>O(1)</code> Insertion Sort <code>\u03a9(n)</code> <code>\u0398(n^2)</code> <code>O(n^2)</code> <code>O(1)</code> Selection Sort <code>\u03a9(n^2)</code> <code>\u0398(n^2)</code> <code>O(n^2)</code> <code>O(1)</code> Quicksort <code>\u03a9(n log(n))</code> <code>\u0398(n log(n))</code> <code>O(n^2)</code> <code>O(log(n))</code> Mergesort <code>\u03a9(n log(n))</code> <code>\u0398(n log(n))</code> <code>O(n log(n))</code> <code>O(n)</code> Heapsort <code>\u03a9(n log(n))</code> <code>\u0398(n log(n))</code> <code>O(n log(n))</code> <code>O(1)</code> Tree Sort <code>\u03a9(n log(n))</code> <code>\u0398(n log(n))</code> <code>O(n^2)</code> <code>O(n)</code> Shell Sort <code>\u03a9(n log(n))</code> <code>\u0398(n(log(n))^2)</code> <code>O(n(log(n))^2)</code> <code>O(1)</code> Timsort <code>\u03a9(n)</code> <code>\u0398(n log(n))</code> <code>O(n log(n))</code> <code>O(n)</code> Bucket Sort <code>\u03a9(n+k)</code> <code>\u0398(n+k)</code> <code>O(n^2)</code> <code>O(n)</code> Radix Sort <code>\u03a9(nk)</code> <code>\u0398(nk)</code> <code>O(nk)</code> <code>O(n+k)</code> Counting Sort <code>\u03a9(n+k)</code> <code>\u0398(n+k)</code> <code>O(n+k)</code> <code>O(k)</code> Cubesort <code>\u03a9(n)</code> <code>\u0398(n log(n))</code> <code>O(n log(n))</code> <code>O(n)</code>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/Time-Complexity/#algo","title":"Searching Algorithms","text":"Algorithm Time Complexity Space Complexity Average Worst Worst Depth First Search (DFS) <code>N/A</code> <code>O(|E| + |V|)</code> <code>O(|V|)</code> Breadth First Search (BFS) <code>N/A</code> <code>O(|V| + |E|)</code> <code>O(|V|)</code> Binary Search <code>O(log(n))</code> <code>O(log(n))</code> <code>O(1)</code> Linear Search (Brute Force) <code>O(n)</code> <code>O(n)</code> <code>O(1)</code> Shortest path Dijkstra  using a min-heap as priority queue <code>O((|V| + |E|) log|V|)</code> <code>O((|V| + |E|) log|V|)</code> <code>O(|V|)</code> Shortest path Dijkstra  using an unsorted array as priority queue <code>O(|V|^2)</code> <code>O(|V|^2)</code> <code>O(|V|)</code> Shortest path by Bellman-Ford <code>O(|V||E|)</code> <code>O(|V||E|)</code> <code>O(|V|)</code>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/Time-Complexity/#algo","title":"Graphs","text":"Node/Edge Management Time Complexity Storage Add Vertex Add Edge Remove Vertex Remove Edge Query Adjacency List <code>O(|V|+|E|)</code> <code>O(1)</code> <code>O(1)</code> <code>O(|V|+|E|)</code> <code>O(|E|)</code> <code>O(|V|)</code> Incidence List <code>O(|V|+|E|)</code> <code>O(1)</code> <code>O(1)</code> <code>O(|E|)</code> <code>O(|E|)</code> <code>O(|E|)</code> Adjacency Matrix <code>O(|V|^2)</code> <code>O(|V|^2)</code> <code>O(1)</code> <code>O(|V|^2)</code> <code>O(1)</code> <code>O(1)</code> Incidence Matrix <code>O(|V||E|)</code> <code>O(|V||E|)</code> <code>O(|V||E|)</code> <code>O(|V||E|)</code> <code>O(|V||E|)</code> <code>O(|E|)</code>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/Time-Complexity/#algo","title":"Heaps","text":"Heaps Time Complexity Heapify Find Max Extract Max Increase Key Insert Delete Merge Linked List (sorted) <code>N/A</code> <code>O(1)</code> <code>O(1)</code> <code>O(n)</code> <code>O(n)</code> <code>O(1)</code> <code>O(m+n)</code> Linked List (unsorted) <code>N/A</code> <code>O(n)</code> <code>O(n)</code> <code>O(1)</code> <code>O(1)</code> <code>O(1)</code> <code>O(1)</code> Binary Heap <code>O(n)</code> <code>O(1)</code> <code>O(log(n))</code> <code>O(log(n))</code> <code>O(log(n))</code> <code>O(log(n))</code> <code>O(m+n)</code> Binomial Heap <code>N/A</code> <code>O(log(n))</code> <code>O(log(n))</code> <code>O(log(n))</code> <code>O(log(n))</code> <code>O(log(n))</code> <code>O(log(n))</code> Fibinacci Heap <code>N/A</code> <code>O(1)</code> <code>O(log(n))</code> <code>O(1)</code> <code>O(1)</code> <code>O(log(n))</code> <code>O(1)</code>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/User_Input-Output/","title":"User Input Output","text":"<pre><code>graph LR\n\n  A(Start) --&gt; B[Declare Variables];\n  B --&gt; C[Read User Input];\n  C --&gt; D[Process Input];\n  D --&gt; E[Generate Output];\n  E --&gt; F[Display Output to User];\n  F --&gt; G(End);\n\n  style A fill:#f00,color:white,font-weight:bold,stroke-width:2px,stroke:yellow\n  style G fill:#00f,color:white,font-weight:bold,stroke-width:2px,stroke:yellow\n\n  subgraph Declare_Variables\n    B[Declare Variables]\n  end\n\n  subgraph Read_User_Input\n    C[Read User Input]\n  end\n\n  subgraph Process_Input\n    D[Process Input]\n  end\n\n  subgraph Generate_Output\n    E[Generate Output]\n  end\n\n  subgraph Display_Output\n    F[Display Output to User]\n  end\n\n  style Declare_Variables fill:##FC33FF,stroke:#FF6E40,stroke-width:4px;\n  style Read_User_Input fill:##FC33FF,stroke:#3A9D23,stroke-width:4px;\n  style Process_Input fill:##FC33FF,stroke:#4D5BFF,stroke-width:4px;\n  style Generate_Output fill:##FC33FF,stroke:#FF406A,stroke-width:4px;\n  style Display_Output fill:##FC33FF,stroke:#0082FF,stroke-width:4px;\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/User_Input-Output/#input","title":"Input","text":"C++Python <p>User Input in C++</p> <p>To read input from the user in C++, you can use the cin stream. Here's an example of how to read an integer from the user</p> <p>Input.cpp</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    int x, y;\n    cin &gt;&gt; x &gt;&gt; y;\n    cout &lt;&lt; \"Value of x=\" &lt;&lt; x &lt;&lt; \" and y=\" &lt;&lt; y;\n    return 0;\n}\n</code></pre> <p>Input: 10 11  Output: Value of x=10 and y=11</p> <p>User Input in Python</p> <p>To read input from the user in Python, you can use the input() function. Here's an example of how to read a integer from the user</p> <p>Input.py</p> <pre><code>x, y = list(map(int, input().split()))\nprint(\"Value of x=\", x, \"and y=\", y)\n</code></pre> <p>Input: 10 11  Output: Value of x=10 and y=11</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/User_Input-Output/#output","title":"Output","text":"C++Python <p>User Output in C++</p> <p>To display output to the user in C++, you can use the cout stream. Here's an example of how to output a message to the user</p> <p>Output.cpp</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    cout &lt;&lt; \"Hello,\" &lt;&lt; endl;\n    cout &lt;&lt; \"My Name is \" &lt;&lt; \"Akash Singh\" &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <p>Output: Hello,  My Name is Akash Singh</p> <p>User Output in Python</p> <p>To display output to the user in Python, you can use the print() function. Here's an example of how to output a message to the user</p> <p>Output.py</p> <pre><code>print(\"Hello,\")\nprint(\"My Name is\", \"Akash Singh\")\n</code></pre> <p>Output: Hello,  My Name is Akash Singh</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/Video-Solution/","title":"Video Solution","text":"<code> C++ Basics in One Shot </code> <code> Time and Space Complexity </code>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/What-are-Arrays-Strings/","title":"What are Arrays Strings","text":"<p>Arrays</p> <ol> <li> <p>Definition: An array is a data structure that stores a fixed-size, ordered collection of elements of the same data type. Each element in an array is identified by its index or position.</p> </li> <li> <p>Features:</p> <ul> <li>Fixed Size: Arrays have a predetermined size when they are declared, and this size cannot be changed during runtime.</li> <li>Homogeneous: All elements in an array must be of the same data type (e.g., integers, floats, characters).</li> <li>Indexed: Elements in an array are accessed using an index, starting from 0 for the first element.</li> <li>Contiguous Memory: Array elements are stored in contiguous memory locations.</li> </ul> </li> <li> <p>Examples:</p> <ul> <li>Integer Array: <code>int numbers[5];</code></li> <li>Character Array (String): <code>char greeting[10];</code></li> </ul> </li> <li> <p>Common Operations:</p> <ul> <li>Accessing Elements: <code>array[index]</code></li> <li>Modifying Elements: <code>array[index] = value</code></li> <li>Iterating through Elements: Using loops (e.g., <code>for</code> loop)</li> <li>Finding Length: <code>sizeof(array) / sizeof(array[0])</code></li> </ul> </li> </ol> <p>Strings</p> <ol> <li> <p>Definition: A string is a sequence of characters, represented as an array of characters. In many programming languages, strings are treated as a special type of array with built-in functions for text manipulation.</p> </li> <li> <p>Features:</p> <ul> <li>Variable Length: Strings can vary in length, and their size can change during runtime.</li> <li>Characters: Strings are composed of characters, typically represented using the <code>char</code> data type.</li> <li>Null-Terminated: In C-style strings, a null character (<code>'\\0'</code>) marks the end of the string.</li> </ul> </li> <li> <p>Examples:</p> <ul> <li>C-style String: <code>char greeting[] = \"Hello\";</code></li> <li>String in Python: <code>\"Hello, World\"</code></li> </ul> </li> <li> <p>Common Operations:</p> <ul> <li>Concatenation: Combining two or more strings (e.g., <code>\"Hello, \" + \"World\"</code>)</li> <li>Length: Finding the number of characters in a string (e.g., <code>strlen</code> in C/C++)</li> <li>Comparison: Checking if two strings are equal (e.g., <code>\"abc\" == \"def\"</code>)</li> <li>Substring: Extracting a portion of a string (e.g., <code>\"Hello\".substring(1, 3)</code> in Java)</li> </ul> </li> </ol>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/What-are-Arrays-Strings/#array","title":"Array","text":""},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/What-are-Arrays-Strings/#method-1","title":"Method-1","text":"C++ <p>Array.cpp</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    int a, b, c, d, e\n    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d &gt;&gt; e;\n\n    int sum = a + b + c + d + e;\n    cout &lt;&lt; sum;\n    return 0;\n}\n</code></pre> <p>Input: 1 2 3 4  Output: 10</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/What-are-Arrays-Strings/#method-2","title":"Method-2","text":"C++ <p>Array.cpp</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    int arr[5];\n    cin &gt;&gt; arr[0] &gt;&gt; arr[1] &gt;&gt; arr[2] &gt;&gt; arr[3] &gt;&gt; arr[4];\n\n    int sum = arr[0] + arr[1] + arr[2] + arr[3] + arr[4];\n    cout &lt;&lt; sum;\n    return 0;\n}\n</code></pre> <p>Input: 1 2 3 4 5  Output: 15</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/What-are-Arrays-Strings/#2d-array","title":"2D Array","text":""},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/What-are-Arrays-Strings/#method-1_1","title":"Method-1","text":"C++ <p>Matrix.cpp</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    int arr[2][2];\n    cin &gt;&gt; arr[0][0] &gt;&gt; arr[0][1] &gt;&gt; arr[1][0] &gt;&gt; arr[1][1];\n\n    int sum = arr[0][0] + arr[0][1] + arr[1][0] + arr[1][1];\n    cout &lt;&lt; sum;\n    return 0;\n}\n</code></pre> <p>Input: 1 2 3 4  Output: 10</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/What-are-Arrays-Strings/#string","title":"String","text":""},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/What-are-Arrays-Strings/#method-1_2","title":"Method-1","text":"C++ <p>String.cpp</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    string str = \"Akash Singh\";\n    int len = str.size();\n    cout &lt;&lt; str[len-1];\n    return 0;\n}\n</code></pre> <p>Output: h</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/While-Loops/","title":"While Loops","text":"<p>While Loops</p> <pre><code>graph LR\n\n  A(Start) --&gt; B[Initialize Variables];\n  B --&gt; C{Condition};\n  C --&gt; |True| D[Execute Loop Body];\n  D --&gt; E[Update Variables];\n  E --&gt; C;\n  C --&gt; |False| F(End);\n\n  style A fill:#f00,color:white,font-weight:bold,stroke-width:2px,stroke:yellow\n  style F fill:#00f,color:white,font-weight:bold,stroke-width:2px,stroke:yellow\n\n  subgraph Initialize_Variables\n    B[Initialization]\n  end\n\n  subgraph Loop_Condition\n    C{Condition}\n  end\n\n  subgraph Execute_Loop_Body\n    D[Loop Body]\n  end\n\n  subgraph Update_Variables\n    E[Update]\n  end\n\n  style Initialize_Variables fill:##FC33FF,stroke:#FF6E40,stroke-width:5px;\n  style Loop_Condition fill:##FC33FF,stroke:#3A9D23,stroke-width:5px;\n  style Execute_Loop_Body fill:##FC33FF,stroke:#4D5BFF,stroke-width:5px;\n  style Update_Variables fill:##FC33FF,stroke:#FF406A,stroke-width:5px;</code></pre> <p>Do-While Loops</p> <pre><code>graph LR\n\n  A(Start) --&gt; B[Initialize Variables];\n  B --&gt; C(Loop Start);\n  C --&gt; D{Condition};\n  D --&gt; |True| E[Execute Loop Body];\n  E --&gt; F(End Loop);\n  F --&gt; G{Continue Loop?};\n  G --&gt; |True| D;\n  G --&gt; |False| H(End);\n\n  style A fill:#f00,color:white,font-weight:bold,stroke-width:2px,stroke:yellow\n  style H fill:#00f,color:white,font-weight:bold,stroke-width:2px,stroke:yellow\n\n  subgraph Initialize_Variables\n    B[Variables]\n  end\n\n  subgraph Loop_Start\n    C(Do)\n  end\n\n  subgraph Condition\n    D{Condition}\n  end\n\n  subgraph Execute_Loop_Body\n    E[Execute Do Body]\n  end\n\n  subgraph End_Loop\n    F(Do Loop)\n  end\n\n  subgraph Continue_Loop\n    G{Continue Loop?}\n  end\n\n  style Initialize_Variables fill:##FC33FF,stroke:#FF6E40,stroke-width:5px;\n  style Loop_Start fill:##FC33FF,stroke:#3A9D23,stroke-width:5px;\n  style Condition fill:##FC33FF,stroke:#3A9D23,stroke-width:5px;\n  style Execute_Loop_Body fill:##FC33FF,stroke:#4D5BFF,stroke-width:5px;\n  style End_Loop fill:##FC33FF,stroke:#FF406A,stroke-width:5px;\n  style Continue_Loop fill:##FC33FF,stroke:#4D5BFF,stroke-width:5px;\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/While-Loops/#while","title":"While","text":"C++ <p>Sum of 10 Numbers.cpp</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    int sum=0;\n    int n=1;\n    while(n &lt;= 10) {\n        sum += n;\n        n++;\n    }  \n    cout &lt;&lt; sum;\n    return 0;\n}\n</code></pre> <p>Output: 55</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.1/While-Loops/#do-while","title":"Do-While","text":"C++ <p>Sum of 10 Numbers.cpp</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    int sum=0;\n    int n=1;\n    do {\n        sum += n;\n        n++;\n    } while(n &lt;= 10);\n    cout &lt;&lt; sum;\n    return 0;\n}\n</code></pre> <p>Output: 55</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.2/Pattern_Problems/Pattern-1/","title":"1. Square Star Pattern\\(N = 5\\)","text":"<p>Example</p> <p>Pattern 1</p> <p></p> <pre>\\[\\Large\n\\begin{align}\n* * * * *\\\\\n* * * * *\\\\\n* * * * *\\\\\n* * * * *\\\\\n* * * * *\n\\end{align}\n\\]</pre> C++ printSquare.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid printSquare(int n) {\n    for(int i=0; i&lt;n; i++) {\n        for(int j=0; j&lt;n; j++) {\n            cout &lt;&lt; \"* \";\n        }\n        cout &lt;&lt; endl;\n    }\n}\n\nint main(void) {\n    int n;\n    cin &gt;&gt; n;\n    printSquare(n);\n    return 0;\n}\n</code></pre> <p>Input: 5  Output: <pre><code>* * * * *\n* * * * *\n* * * * *\n* * * * *\n* * * * *\n</code></pre></p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.2/Pattern_Problems/Pattern-10/","title":"10. Triangle Star Pattern\\(N = 5\\)","text":"<p>Example</p> <p>Pattern 10</p> <p></p> <pre>\\[\\Large\n\\begin{align}\n&amp;*\\\\\n&amp;*\\; *\\\\\n&amp;*\\; *\\; *\\\\\n&amp;*\\; *\\; *\\; *\\\\\n&amp;*\\; *\\; *\\; *\\; *\\\\\n&amp;*\\; *\\; *\\; *\\\\\n&amp;*\\; *\\; *\\\\\n&amp;*\\; *\\\\\n&amp;*\n\\end{align}\n\\]</pre> C++ printTriangle.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid printTriangle(int n) {\n    for(int i=1; i&lt;n; i++) {\n        for(int j=0; j&lt;i; j++) {\n            cout &lt;&lt; \"* \";\n        }\n        cout &lt;&lt; endl;\n    }\n    for(int i=n; i&gt;0; i--) {\n        for(int j=0; j&lt;i; j++) {\n            cout &lt;&lt; \"* \";\n        }\n        cout &lt;&lt; endl;\n    }\n}\n\nint main(void) {\n    int n;\n    cin &gt;&gt; n;\n    printTriangle(n);\n    return 0;\n}\n</code></pre> <p>Input: 5  Output: <pre><code>* \n* * \n* * * \n* * * * \n* * * * *\n* * * *\n* * *\n* *\n*\n</code></pre></p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.2/Pattern_Problems/Pattern-11/","title":"11. Triangle Digit Pattern\\(N = 5\\)","text":"<p>Example</p> <p>Pattern 11</p> <p></p> <pre>\\[\\Large\n\\begin{align}\n&amp;1\\\\\n&amp;0\\; 1\\\\\n&amp;1\\; 0\\; 1\\\\\n&amp;0\\; 1\\; 0\\; 1\\\\\n&amp;1\\; 0\\; 1\\; 0\\; 1\n\\end{align}\n\\]</pre> C++ printTriangle.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid printTriangle(int n) {\n    for(int i=1; i&lt;=n; i++) {\n        for(int j=0; j&lt;i; j++) {\n            if((i+j)%2 == 0)\n                cout &lt;&lt; \"0 \";\n            else\n                cout &lt;&lt; \"1 \";\n        }\n        cout &lt;&lt; endl;\n    }\n}\n\nint main(void) {\n    int n;\n    cin &gt;&gt; n;\n    printTriangle(n);\n    return 0;\n}\n</code></pre> <p>Input: 5  Output: <pre><code>1 \n0 1 \n1 0 1\n0 1 0 1 \n1 0 1 0 1\n</code></pre></p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.2/Pattern_Problems/Pattern-12/","title":"12. Left-Right Triangle Digit Pattern\\(N = 5\\)","text":"<p>Example</p> <p>Pattern 12</p> <p></p> <pre>\\[\\Large\n\\begin{align}\n    &amp;1 \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad 1 \\\\\n    &amp;1 \\quad 2 \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad 2 \\quad 1 \\\\\n    &amp;1 \\quad 2 \\quad 3 \\quad \\quad \\quad \\quad \\quad \\quad \\quad 3 \\quad 2 \\quad 1 \\\\\n    &amp;1 \\quad 2 \\quad 3 \\quad 4 \\quad \\quad \\quad \\quad 4 \\quad 3 \\quad 2 \\quad 1 \\\\\n    &amp;1 \\quad 2 \\quad 3 \\quad 4 \\quad 5 \\quad 5 \\quad 4 \\quad 3 \\quad 2 \\quad 1 \\\\\n\\end{align}\n\\]</pre> C++ printTriangle.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid printTriangle(int n) {\n    for(int i=1; i&lt;=n; i++) {\n        for(int j=1; j&lt;=i; j++) {\n            cout &lt;&lt; j &lt;&lt; \" \";\n        }\n        for(int k=0; k&lt;4*(n-i); k++) {\n            cout &lt;&lt; \" \";\n        }\n        for(int j=i; j&gt;0; j--) {\n            cout &lt;&lt; j &lt;&lt; \" \";\n        }\n        cout &lt;&lt; endl;\n    }\n}\n\nint main(void) {\n    int n;\n    cin &gt;&gt; n;\n    printTriangle(n);\n    return 0;\n}\n</code></pre> <p>Input: 5  Output: <pre><code>1                 1\n1 2             2 1\n1 2 3         3 2 1\n1 2 3 4     4 3 2 1\n1 2 3 4 5 5 4 3 2 1\n</code></pre></p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.2/Pattern_Problems/Pattern-13/","title":"13. Triangle Digit Pattern\\(N = 5\\)","text":"<p>Example</p> <p>Pattern 13</p> <p></p> <pre>\\[\\Large\n\\begin{align}\n&amp;1\\\\\n&amp;2\\; 3\\\\\n&amp;4\\; 5\\; 6\\\\\n&amp;7\\; 8\\; 9\\; 10\\\\\n&amp;11\\; 12\\; 13\\; 14\\; 15\n\\end{align}\n\\]</pre> C++ printTriangle.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid printTriangle(int n) {\n    int num=1;\n    for(int i=1; i&lt;=n; i++) {\n        for(int j=0; j&lt;i; j++) {\n            cout &lt;&lt; num++ &lt;&lt; \" \";\n        }\n        cout &lt;&lt; endl;\n    }\n}\n\nint main(void) {\n    int n;\n    cin &gt;&gt; n;\n    printTriangle(n);\n    return 0;\n}\n</code></pre> <p>Input: 5  Output: <pre><code>1 \n2 3 \n4 5 6 \n7 8 9 10 \n11 12 13 14 15\n</code></pre></p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.2/Pattern_Problems/Pattern-14/","title":"14. Triangle Character Pattern\\(N = 5\\)","text":"<p>Example</p> <p>Pattern 14</p> <p></p> <pre>\\[\\Large\n\\begin{align}\n&amp;A\\\\\n&amp;AB\\\\\n&amp;ABC\\\\\n&amp;ABCD\\\\\n&amp;ABCDE\\\\\n\\end{align}\n\\]</pre> C++ printTriangle.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid printTriangle(int n) {\n    for(int i=1; i&lt;=n; i++) {\n        char ch = 'A';\n        for(int j=0; j&lt;i; j++) {\n            cout &lt;&lt; ch++;\n        }\n        cout &lt;&lt; endl;\n    }\n}\n\nint main(void) {\n    int n;\n    cin &gt;&gt; n;\n    printTriangle(n);\n    return 0;\n}\n</code></pre> <p>Input: 5  Output: <pre><code>A\nAB\nABC\nABCD\nABCDE\n</code></pre></p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.2/Pattern_Problems/Pattern-15/","title":"15. Reverse Triangle Character Pattern\\(N = 5\\)","text":"<p>Example</p> <p>Pattern 15</p> <p></p> <pre>\\[\\Large\n\\begin{align}\n&amp;ABCDE\\\\\n&amp;ABCD\\\\\n&amp;ABC\\\\\n&amp;AB\\\\\n&amp;A\\\\\n\\end{align}\n\\]</pre> C++ printTriangle.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid printTriangle(int n) {\n    for(int i=n; i&gt;0; i--) {\n        char ch = 'A';\n        for(int j=0; j&lt;i; j++) {\n            cout &lt;&lt; ch++;\n        }\n        cout &lt;&lt; endl;\n    }\n}\n\nint main(void) {\n    int n;\n    cin &gt;&gt; n;\n    printTriangle(n);\n    return 0;\n}\n</code></pre> <p>Input: 5  Output: <pre><code>ABCDE\nABCD\nABC\nAB\nA\n</code></pre></p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.2/Pattern_Problems/Pattern-16/","title":"16. Triangle Character Pattern\\(N = 5\\)","text":"<p>Example</p> <p>Pattern 16</p> <p></p> <pre>\\[\\Large\n\\begin{align}\n&amp;A\\\\\n&amp;BB\\\\\n&amp;CCC\\\\\n&amp;DDDD\\\\\n&amp;EEEEE\\\\\n\\end{align}\n\\]</pre> C++ printTriangle.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid printTriangle(int n) {\n    char ch = 'A';\n    for(int i=1; i&lt;=n; i++) {\n        for(int j=0; j&lt;i; j++) {\n            cout &lt;&lt; ch;\n        }\n        ch++;\n        cout &lt;&lt; endl;\n    }\n}\n\nint main(void) {\n    int n;\n    cin &gt;&gt; n;\n    printTriangle(n);\n    return 0;\n}\n</code></pre> <p>Input: 5  Output: <pre><code>A\nBB\nCCC\nDDDD\nEEEEE\n</code></pre></p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.2/Pattern_Problems/Pattern-17/","title":"17. Triangle Character Pattern\\(N = 5\\)","text":"<p>Example</p> <p>Pattern 17</p> <p></p> <pre>\\[\\Large\n\\begin{align*}\n    &amp;\\phantom{A}\\phantom{A}\\phantom{A}\\phantom{A}A \\\\\n    &amp;\\phantom{A}\\phantom{A}\\phantom{A}ABA \\\\\n    &amp;\\phantom{A}\\phantom{A}ABCBA \\\\\n    &amp;\\phantom{A}ABCDCBA \\\\\n    &amp;ABCDEDCBA \\\\\n\\end{align*}\n\\]</pre> C++ printTriangle.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid printTriangle(int n) {\n    for(int i=1; i&lt;=n; i++) {\n        char ch = 'A';\n        for(int j=0; j&lt;n-i; j++) {\n            cout &lt;&lt; \" \";\n        }\n        for(int j=0; j&lt;i; j++) {\n            cout &lt;&lt; ch++;\n        }\n        --ch;\n        for(int j=1; j&lt;i; j++) {\n            cout &lt;&lt; --ch;\n        }\n        cout &lt;&lt; endl;\n    }\n}\n\nint main(void) {\n    int n;\n    cin &gt;&gt; n;\n    printTriangle(n);\n    return 0;\n}\n</code></pre> <p>Input: 5  Output: <pre><code>    A\n   ABA\n  ABCBA\n ABCDCBA\nABCDEDCBA\n</code></pre></p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.2/Pattern_Problems/Pattern-18/","title":"18. Triangle Character Pattern\\(N = 5\\)","text":"<p>Example</p> <p>Pattern 14</p> <p></p> <pre>\\[\\Large\n\\begin{align}\n&amp;E\\\\\n&amp;E\\;D\\\\\n&amp;E\\;D\\;C\\\\\n&amp;E\\;D\\;C\\;B\\\\\n&amp;E\\;D\\;C\\;B\\;A\\\\\n\\end{align}\n\\]</pre> C++ printTriangle.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid printTriangle(int n) {\n    for(int i=1; i&lt;=n; i++) {\n        char ch = 'A';\n        for(int j=0; j&lt;n; j++) {\n            ch++;\n        }\n        for(int j=0; j&lt;i; j++) {\n            cout &lt;&lt; --ch &lt;&lt; \" \";\n        }\n        cout &lt;&lt; endl;\n    }\n}\n\nint main(void) {\n    int n;\n    cin &gt;&gt; n;\n    printTriangle(n);\n    return 0;\n}\n</code></pre> <p>Input: 5  Output: <pre><code>E\nE D\nE D C\nE D C B\nE D C B A\n</code></pre></p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.2/Pattern_Problems/Pattern-19/","title":"19. Hollow Diamond Star Pattern\\(N = 5\\)","text":"<p>Example</p> <p>Pattern 19</p> <p></p> <pre>\\[\\Large\n\\begin{align}\n    &amp;\\ast\\ast\\ast\\ast\\ast\\ast\\ast\\ast\\ast\\ast \\\\\n    &amp;\\ast\\ast\\ast\\ast\\ \\ \\ \\ \\ \\ \\ast\\ast\\ast\\ast \\\\\n    &amp;\\ast\\ast\\ast\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ast\\ast\\ast \\\\\n    &amp;\\ast\\ast\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ast\\ast \\\\\n    &amp;\\ast\\ \\ \\ \\ \\ \\ \\ \\  \\ \\ \\ \\ \\ \\ \\  \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ast \\\\\n    &amp;\\ast\\ \\ \\ \\ \\ \\ \\ \\  \\ \\ \\ \\ \\ \\ \\  \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ast \\\\\n    &amp;\\ast\\ast\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ast\\ast \\\\\n    &amp;\\ast\\ast\\ast\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ast\\ast\\ast \\\\\n    &amp;\\ast\\ast\\ast\\ast\\ \\ \\ \\ \\ \\ \\ast\\ast\\ast\\ast \\\\\n    &amp;\\ast\\ast\\ast\\ast\\ast\\ast\\ast\\ast\\ast\\ast \\\\\n\\end{align}\n\\]</pre> C++ printSquare.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid printSquare(int n) {\n    for(int i=n; i&gt;0; i--) {\n        for(int j=0; j&lt;i; j++) {\n            cout &lt;&lt; \"*\";\n        }\n        for(int j=0; j&lt;2*(n-i); j++) {\n            cout &lt;&lt; \" \";\n        }\n        for(int j=0; j&lt;i; j++) {\n            cout &lt;&lt; \"*\";\n        }\n        cout &lt;&lt; endl;\n    }\n    for(int i=1; i&lt;=n; i++) {\n        for(int j=0; j&lt;i; j++) {\n            cout &lt;&lt; \"*\";\n        }\n        for(int j=0; j&lt;2*(n-i); j++) {\n            cout &lt;&lt; \" \";\n        }\n        for(int j=0; j&lt;i; j++) {\n            cout &lt;&lt; \"*\";\n        }\n        cout &lt;&lt; endl;\n    }\n}\n\nint main(void) {\n    int n;\n    cin &gt;&gt; n;\n    printSquare(n);\n    return 0;\n}\n</code></pre> <p>Input: 5  Output: <pre><code>**********\n****  ****\n***    ***\n**      **\n*        *\n*        *\n**      **\n***    ***\n****  ****\n**********\n</code></pre></p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.2/Pattern_Problems/Pattern-2/","title":"2. Triangle Star Pattern\\(N = 5\\)","text":"<p>Example</p> <p>Pattern 2</p> <p></p> <pre>\\[\\Large\n\\begin{align}\n&amp;*\\\\\n&amp;*\\; *\\\\\n&amp;*\\; *\\; *\\\\\n&amp;*\\; *\\; *\\; *\\\\\n&amp;*\\; *\\; *\\; *\\; *\n\\end{align}\n\\]</pre> C++ printTriangle.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid printTriangle(int n) {\n    for(int i=0; i&lt;n; i++) {\n        for(int j=0; j&lt;=i; j++) {\n            cout &lt;&lt; \"* \";\n        }\n        cout &lt;&lt; endl;\n    }\n}\n\nint main(void) {\n    int n;\n    cin &gt;&gt; n;\n    printTriangle(n);\n    return 0;\n}\n</code></pre> <p>Input: 5  Output: <pre><code>* \n* * \n* * * \n* * * * \n* * * * *\n</code></pre></p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.2/Pattern_Problems/Pattern-20/","title":"20. Hollow Diamond Star Pattern\\(N = 5\\)","text":"<p>Example</p> <p>Pattern 20</p> <p></p> <pre>\\[\\Large\n\\begin{align}\n    &amp;\\ast\\ \\ \\ \\ \\ \\ \\ \\  \\ \\ \\ \\ \\ \\ \\  \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ast \\\\\n    &amp;\\ast\\ast\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ast\\ast \\\\\n    &amp;\\ast\\ast\\ast\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ast\\ast\\ast \\\\\n    &amp;\\ast\\ast\\ast\\ast\\ \\ \\ \\ \\ \\ \\ast\\ast\\ast\\ast \\\\\n    &amp;\\ast\\ast\\ast\\ast\\ast\\ast\\ast\\ast\\ast\\ast \\\\\n    &amp;\\ast\\ast\\ast\\ast\\ \\ \\ \\ \\ \\ \\ast\\ast\\ast\\ast \\\\\n    &amp;\\ast\\ast\\ast\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ast\\ast\\ast \\\\\n    &amp;\\ast\\ast\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ast\\ast \\\\\n    &amp;\\ast\\ \\ \\ \\ \\ \\ \\ \\  \\ \\ \\ \\ \\ \\ \\  \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ast \\\\\n\\end{align}\n\\]</pre> C++ printTriangle.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid printTriangle(int n) {\n    for(int i=1; i&lt;=n; i++) {\n        for(int j=0; j&lt;i; j++) {\n            cout &lt;&lt; \"*\";\n        }\n        for(int j=0; j&lt;2*(n-i); j++) {\n            cout &lt;&lt; \" \";\n        }\n        for(int j=0; j&lt;i; j++) {\n            cout &lt;&lt; \"*\";\n        }\n        cout &lt;&lt; endl;\n    }\n    for(int i=n-1; i&gt;0; i--) {\n        for(int j=0; j&lt;i; j++) {\n            cout &lt;&lt; \"*\";\n        }\n        for(int j=0; j&lt;2*(n-i); j++) {\n            cout &lt;&lt; \" \";\n        }\n        for(int j=0; j&lt;i; j++) {\n            cout &lt;&lt; \"*\";\n        }\n        cout &lt;&lt; endl;\n    }\n}\n\nint main(void) {\n    int n;\n    cin &gt;&gt; n;\n    printTriangle(n);\n    return 0;\n}\n</code></pre> <p>Input: 5  Output: <pre><code>*        *\n**      **\n***    ***\n****  ****\n**********\n****  ****\n***    ***\n**      **\n*        *\n</code></pre></p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.2/Pattern_Problems/Pattern-21/","title":"21. Hollow Square Star Pattern\\(N = 5\\)","text":"<p>Example</p> <p>Pattern 21</p> <p></p> <pre>\\[\\Large\n\\begin{align}\n    &amp; ***** \\\\\n    &amp; * \\quad \\quad * \\\\\n    &amp; * \\quad \\quad * \\\\\n    &amp; * \\quad \\quad * \\\\\n    &amp; ***** \\\\\n\\end{align}\n\\]</pre> C++ printSquare.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid printSquare(int n) {\n    for(int i=1; i&lt;=n; i++) {\n        for(int j=1; j&lt;=n; j++) {\n            if(i==1 or i==n or j==1 or j==n) {\n                cout &lt;&lt; \"*\";\n            } \n            else {\n                cout &lt;&lt; \" \";\n            }\n        }\n        cout &lt;&lt; endl;\n    }\n}\n\nint main(void) {\n    int n;\n    cin &gt;&gt; n;\n    printSquare(n);\n    return 0;\n}\n</code></pre> <p>Input: 5  Output: <pre><code>*****\n*   *\n*   *\n*   *\n*****\n</code></pre></p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.2/Pattern_Problems/Pattern-22/","title":"22. Square Digit Pattern\\(N = 5\\)","text":"<p>Example</p> <p>Pattern 22</p> <p></p> <pre>\\[\\Large\n\\begin{align}\n5\\; 5\\; 5\\; 5\\; 5\\; 5\\; 5\\; 5\\; 5\\\\\n5\\; 4\\; 4\\; 4\\; 4\\; 4\\; 4\\; 4\\; 5\\\\\n5\\; 4\\; 3\\; 3\\; 3\\; 3\\; 3\\; 4\\; 5\\\\\n5\\; 4\\; 3\\; 2\\; 2\\; 2\\; 3\\; 4\\; 5\\\\\n5\\; 4\\; 3\\; 2\\; 1\\; 2\\; 3\\; 4\\; 5\\\\\n5\\; 4\\; 3\\; 2\\; 2\\; 2\\; 3\\; 4\\; 5\\\\\n5\\; 4\\; 3\\; 3\\; 3\\; 3\\; 3\\; 4\\; 5\\\\\n5\\; 4\\; 4\\; 4\\; 4\\; 4\\; 4\\; 4\\; 5\\\\\n5\\; 5\\; 5\\; 5\\; 5\\; 5\\; 5\\; 5\\; 5\n\\end{align}\n\\]</pre> C++ printSquare.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid printSquare(int n) {\n    for(int i=1; i&lt;=n; i++) {\n        for(int j=n; j&gt;(n-i); j--) {\n            cout &lt;&lt; j &lt;&lt; \" \";\n        }\n        for(int j=1; j&lt;=2*(n-i)-1; j++) {\n            cout &lt;&lt; (n-i+1) &lt;&lt; \" \";\n        }\n        for(int j=n-i+1; j&lt;=n; j++) {\n            if(j==1)\n                continue;\n            cout &lt;&lt; j &lt;&lt; \" \";\n        }\n        cout &lt;&lt; endl;\n    }\n    for(int i=n-1; i&gt;0; i--) {\n        for(int j=n; j&gt;(n-i); j--) {\n            cout &lt;&lt; j &lt;&lt; \" \";\n        }\n        for(int j=1; j&lt;=2*(n-i)-1; j++) {\n            cout &lt;&lt; (n-i+1) &lt;&lt; \" \";\n        }\n        for(int j=n-i+1; j&lt;=n; j++) {\n            if(j==1)\n                continue;\n            cout &lt;&lt; j &lt;&lt; \" \";\n        }\n        cout &lt;&lt; endl;\n    }\n}\n\nint main(void) {\n    int n;\n    cin &gt;&gt; n;\n    printSquare(n);\n    return 0;\n}\n</code></pre> <p>Input: 5  Output: <pre><code>5 5 5 5 5 5 5 5 5\n5 4 4 4 4 4 4 4 5\n5 4 3 3 3 3 3 4 5\n5 4 3 2 2 2 3 4 5\n5 4 3 2 1 2 3 4 5\n5 4 3 2 2 2 3 4 5\n5 4 3 3 3 3 3 4 5\n5 4 4 4 4 4 4 4 5\n5 5 5 5 5 5 5 5 5\n</code></pre></p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.2/Pattern_Problems/Pattern-3/","title":"3. Triangle Digit Pattern\\(N = 5\\)","text":"<p>Example</p> <p>Pattern 3</p> <p></p> <pre>\\[\\Large\n\\begin{align}\n&amp;1\\\\\n&amp;1\\; 2\\\\\n&amp;1\\; 2\\; 3\\\\\n&amp;1\\; 2\\; 3\\; 4\\\\\n&amp;1\\; 2\\; 3\\; 4\\; 5\n\\end{align}\n\\]</pre> C++ printTriangle.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid printTriangle(int n) {\n    for(int i=0; i&lt;n; i++) {\n        for(int j=0; j&lt;=i; j++) {\n            cout &lt;&lt; j+1 &lt;&lt; \" \";\n        }\n        cout &lt;&lt; endl;\n    }\n}\n\nint main(void) {\n    int n;\n    cin &gt;&gt; n;\n    printTriangle(n);\n    return 0;\n}\n</code></pre> <p>Input: 5  Output: <pre><code>1\n1 2 \n1 2 3 \n1 2 3 4 \n1 2 3 4 5\n</code></pre></p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.2/Pattern_Problems/Pattern-4/","title":"4. Triangle Digit Pattern\\(N = 5\\)","text":"<p>Example</p> <p>Pattern 4</p> <p></p> <pre>\\[\\Large\n\\begin{align}\n&amp;1\\\\\n&amp;2\\; 2\\\\\n&amp;3\\; 3\\; 3\\\\\n&amp;4\\; 4\\; 4\\; 4\\\\\n&amp;5\\; 5\\; 5\\; 5\\; 5\n\\end{align}\n\\]</pre> C++ printTriangle.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid printTriangle(int n) {\n    for(int i=0; i&lt;n; i++) {\n        for(int j=0; j&lt;=i; j++) {\n            cout &lt;&lt; i+1 &lt;&lt; \" \";\n        }\n        cout &lt;&lt; endl;\n    }\n}\n\nint main(void) {\n    int n;\n    cin &gt;&gt; n;\n    printTriangle(n);\n    return 0;\n}\n</code></pre> <p>Input: 5  Output: <pre><code>1\n2 2 \n3 3 3 \n4 4 4 4 \n5 5 5 5 5\n</code></pre></p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.2/Pattern_Problems/Pattern-5/","title":"5. Reverse Triangle Star Pattern\\(N = 5\\)","text":"<p>Example</p> <p>Pattern 5</p> <p></p> <pre>\\[\\Large\n\\begin{align}\n&amp;*\\; *\\; *\\; *\\; *\\\\\n&amp;*\\; *\\; *\\; *\\\\\n&amp;*\\; *\\; *\\\\\n&amp;*\\; *\\\\\n&amp;*\n\\end{align}\n\\]</pre> C++ printTriangle.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid printTriangle(int n) {\n    for(int i=n; i&gt;0; i--) {\n        for(int j=0; j&lt;i; j++) {\n            cout &lt;&lt; \"* \";\n        }\n        cout &lt;&lt; endl;\n    }\n}\n\nint main(void) {\n    int n;\n    cin &gt;&gt; n;\n    printTriangle(n);\n    return 0;\n}\n</code></pre> <p>Input: 5  Output: <pre><code>* * * * *\n* * * * \n* * * \n* *  \n* \n</code></pre></p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.2/Pattern_Problems/Pattern-6/","title":"6. Reverse Triangle Digit Pattern\\(N = 5\\)","text":"<p>Example</p> <p>Pattern 6</p> <p></p> <pre>\\[\\Large\n\\begin{align}\n&amp;1\\; 2\\; 3\\; 4\\; 5\\\\\n&amp;1\\; 2\\; 3\\; 4\\\\\n&amp;1\\; 2\\; 3\\\\\n&amp;1\\; 2\\\\\n&amp;1\n\\end{align}\n\\]</pre> C++ printTriangle.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid printTriangle(int n) {\n    for(int i=n; i&gt;0; i--) {\n        for(int j=0; j&lt;i; j++) {\n            cout &lt;&lt; j+1 &lt;&lt; \" \";\n        }\n        cout &lt;&lt; endl;\n    }\n}\n\nint main(void) {\n    int n;\n    cin &gt;&gt; n;\n    printTriangle(n);\n    return 0;\n}\n</code></pre> <p>Input: 5  Output: <pre><code>1 2 3 4 5\n1 2 3 4\n1 2 3 \n1 2  \n1\n</code></pre></p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.2/Pattern_Problems/Pattern-7/","title":"7. Triangle Star Pattern\\(N = 5\\)","text":"<p>Example</p> <p>Pattern 7</p> <p></p> <pre>\\[\\Large\n\\begin{align}\n    &amp;\\phantom{****}*\\\\\n    &amp;\\phantom{***}***\\\\\n    &amp;\\phantom{**}*****\\\\\n    &amp;\\phantom{*}*******\\\\\n    &amp;\\phantom{}*********\\\\\n\\end{align}\n\\]</pre> C++ printTriangle.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid printTriangle(int n) {\n    for(int i=1; i&lt;=n; i++) {\n        for(int k=0; k&lt;(n-i); k++) {\n            cout &lt;&lt; \" \";\n        }\n        for(int col=0; col&lt;2*row-1; col++) {\n            cout &lt;&lt; \"*\";\n        }\n        cout &lt;&lt; endl;\n    }\n}\n\nint main(void) {\n    int n;\n    cin &gt;&gt; n;\n    printTriangle(n);\n    return 0;\n}\n</code></pre> <p>Input: 5  Output: <pre><code>    *\n   ***  \n  *****\n *******\n*********\n</code></pre></p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.2/Pattern_Problems/Pattern-8/","title":"8. Reverse Triangle Star Pattern\\(N = 5\\)","text":"<p>Example</p> <p>Pattern 8</p> <p></p> <pre>\\[\\Large\n\\begin{align}\n    &amp;\\phantom{}*********\\\\\n    &amp;\\phantom{*}*******\\\\\n    &amp;\\phantom{**}*****\\\\\n    &amp;\\phantom{***}***\\\\\n    &amp;\\phantom{****}*\\\\\n\\end{align}\n\\]</pre> C++ printTriangle.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid printTriangle(int n) {\n    for(int i=n; i&gt;0; i--) {\n        for(int j=n-i; j&gt;0; j--) {\n            cout &lt;&lt; \" \";\n        }\n        for(int k=0; k&lt;2*i-1; k++) {\n            cout &lt;&lt; \"*\";\n        }\n        cout &lt;&lt; endl;\n    }\n}\n\nint main(void) {\n    int n;\n    cin &gt;&gt; n;\n    printTriangle(n);\n    return 0;\n}\n</code></pre> <p>Input: 5  Output: <pre><code>*********\n *******\n  *****\n   ***\n    *\n</code></pre></p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.2/Pattern_Problems/Pattern-9/","title":"9. Diamond Star Pattern\\(N = 5\\)","text":"<p>Example</p> <p>Pattern 9</p> <p></p> <pre>\\[\\Large\n\\begin{align*}\n    &amp;\\phantom{****}*\\\\\n    &amp;\\phantom{***}***\\\\\n    &amp;\\phantom{**}*****\\\\\n    &amp;\\phantom{*}*******\\\\\n    &amp;\\phantom{}*********\\\\\n    &amp;\\phantom{*}*******\\\\\n    &amp;\\phantom{**}*****\\\\\n    &amp;\\phantom{***}***\\\\\n    &amp;\\phantom{****}*\\\\\n\\end{align*}\n\\]</pre> C++ printDiamond.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid printDiamond(int n) {\n    for(int i=1; i&lt;=n; i++) {\n        for(int j=0; j&lt;n-i; j++) {\n            cout &lt;&lt; \" \";\n        }\n        for(int k=0; k&lt;i; k++) {\n            cout &lt;&lt; \"* \";\n        }\n        cout &lt;&lt; endl;\n    }\n    for(int i=n; i&gt;0; i--) {\n        for(int j=n-i; j&gt;0; j--) {\n            cout &lt;&lt; \" \";\n        }\n        for(int k=0; k&lt;i; k++) {\n            cout &lt;&lt; \"* \";\n        }\n        cout &lt;&lt; endl;\n    }\n}\n\nint main(void) {\n    int n;\n    cin &gt;&gt; n;\n    printDiamond(n);\n    return 0;\n}\n</code></pre> <p>Input: 5  Output: <pre><code>    *\n   ***  \n  *****\n *******\n*********\n*********\n *******\n  *****\n   ***\n    *\n</code></pre></p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.2/Pattern_Problems/Video-Solution/","title":"Video Solution","text":"<code> Solve any Pattern Question </code>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.3/CPP-STL/","title":"CPP STL","text":"<p>The C++ Standard Template Library (STL) is a powerful set of C++ template classes to provide general-purpose classes and functions with templates that implement many popular and commonly used algorithms and data structures like vectors, lists, queues, and stacks. In this blog, we will explore the fundamentals of the C++ STL and demonstrate its usage with practical examples.</p> <p>Table of Contents:</p> <ol> <li> <p>STL Containers</p> <ul> <li>Vectors</li> <li>Lists</li> <li>Maps</li> <li>Sets</li> </ul> </li> <li> <p>STL Algorithms</p> <ul> <li>Sorting</li> <li>Searching</li> <li>Iterating</li> <li>Transforming</li> </ul> </li> <li> <p>STL Functions</p> <ul> <li>Lambda Functions</li> <li>Function Objects (Functors)</li> <li>Function Binders</li> </ul> </li> <li> <p>Example Applications</p> <ul> <li>Sorting a Vector of Integers</li> <li>Using Map for Data Storage</li> <li>Solving Problems with Algorithms</li> <li>Customizing Functionality with Functors</li> </ul> </li> </ol>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.3/CPP-STL/#1-stl-containers","title":"1. STL Containers","text":"<p>STL provides various container classes to store and manipulate data efficiently. Let's take a closer look at some commonly used containers.</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.3/CPP-STL/#vectors","title":"Vectors","text":"<p>Vectors are dynamic arrays that can grow or shrink in size automatically. Here's how you create and use a vector:</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main() {\n    std::vector&lt;int&gt; myVector;\n\n    myVector.push_back(1);\n    myVector.push_back(2);\n    myVector.push_back(3);\n\n    for (int i : myVector) {\n        std::cout &lt;&lt; i &lt;&lt; \" \";\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.3/CPP-STL/#lists","title":"Lists","text":"<p>Lists are doubly-linked lists, allowing for fast insertions and deletions at both ends. Here's a simple example:</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;list&gt;\n\nint main() {\n    std::list&lt;int&gt; myList;\n\n    myList.push_back(1);\n    myList.push_back(2);\n    myList.push_front(3);\n\n    for (int i : myList) {\n        std::cout &lt;&lt; i &lt;&lt; \" \";\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.3/CPP-STL/#maps","title":"Maps","text":"<p>Maps are associative containers that store key-value pairs. Here's how you can use a map:</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\n\nint main() {\n    std::map&lt;std::string, int&gt; myMap;\n\n    myMap[\"Alice\"] = 25;\n    myMap[\"Bob\"] = 30;\n\n    std::cout &lt;&lt; \"Alice's age: \" &lt;&lt; myMap[\"Alice\"] &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.3/CPP-STL/#sets","title":"Sets","text":"<p>Sets are containers that store unique values. They can be handy when you need to eliminate duplicates from a collection:</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;set&gt;\n\nint main() {\n    std::set&lt;int&gt; mySet;\n\n    mySet.insert(1);\n    mySet.insert(2);\n    mySet.insert(1); // Duplicate value\n\n    for (int i : mySet) {\n        std::cout &lt;&lt; i &lt;&lt; \" \";\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.3/CPP-STL/#2-stl-algorithms","title":"2. STL Algorithms","text":"<p>STL provides a wide range of algorithms that work seamlessly with containers. Here are some examples:</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.3/CPP-STL/#sorting","title":"Sorting","text":"<p>Sorting elements in a container is a common task, and STL provides efficient sorting algorithms:</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nint main() {\n    std::vector&lt;int&gt; myVector = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};\n\n    std::sort(myVector.begin(), myVector.end());\n\n    for (int i : myVector) {\n        std::cout &lt;&lt; i &lt;&lt; \" \";\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.3/CPP-STL/#searching","title":"Searching","text":"<p>STL offers various searching algorithms, such as <code>find</code>, <code>binary_search</code>, and <code>count</code>:</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nint main() {\n    std::vector&lt;int&gt; myVector = {1, 2, 3, 4, 5, 6};\n\n    if (std::binary_search(myVector.begin(), myVector.end(), 3)) {\n        std::cout &lt;&lt; \"Found 3 in the vector.\" &lt;&lt; std::endl;\n    } else {\n        std::cout &lt;&lt; \"3 not found.\" &lt;&lt; std::endl;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.3/CPP-STL/#iterating","title":"Iterating","text":"<p>STL provides iterators to traverse through containers:</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main() {\n    std::vector&lt;int&gt; myVector = {1, 2, 3, 4, 5};\n\n    for (auto it = myVector.begin(); it != myVector.end(); ++it) {\n        std::cout &lt;&lt; *it &lt;&lt; \" \";\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.3/CPP-STL/#transforming","title":"Transforming","text":"<p>You can transform elements in a container using various algorithms like <code>transform</code>:</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nint main() {\n    std::vector&lt;int&gt; myVector = {1, 2, 3, 4, 5};\n\n    std::transform(myVector.begin(), myVector.end(), myVector.begin(),\n        [](int x) { return x * 2; });\n\n    for (int i : myVector) {\n        std::cout &lt;&lt; i &lt;&lt; \" \";\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.3/CPP-STL/#3-stl-functions","title":"3. STL Functions","text":"<p>STL allows you to work with functions flexibly using concepts like lambda functions, function objects (functors), and function binders.</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.3/CPP-STL/#lambda-functions","title":"Lambda Functions","text":"<p>Lambda functions are anonymous functions defined on the fly. They are handy for short, one-off operations:</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nint main() {\n    std::vector&lt;int&gt; myVector = {1, 2, 3, 4, 5};\n\n    // Using a lambda function to multiply each element by 2\n    std::for_each(myVector.begin(), myVector.end(),\n        [](int &amp;x) { x *= 2; });\n\n    for (int i : myVector) {\n        std::cout &lt;&lt; i &lt;&lt; \" \";\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.3/CPP-STL/#functors-function-objects","title":"Functors (Function Objects)","text":"<p>Functors are objects that can be called as if they were functions. They can have their own state, making them more powerful than simple functions:</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\n// Define a functor\nstruct AddValue {\n    int value;\n    AddValue(int val) : value(val) {}\n\n    int operator()(int x) const {\n        return x + value;\n    }\n};\n\nint main() {\n    std::vector&lt;int&gt; myVector = {1, 2, 3, 4, 5};\n\n    AddValue addFive(5); // Create an instance of the functor\n\n    std::transform(myVector.begin(), myVector.end(), myVector.begin(), addFive);\n\n    for (int i : myVector) {\n        std::cout &lt;&lt; i &lt;&lt; \" \";\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.3/CPP-STL/#function-binders","title":"Function Binders","text":"<p>Function bind</p> <p>ers allow you to fix certain arguments of a function before calling it:</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n#include &lt;functional&gt;\n\nint main() {\n    std::vector&lt;int&gt; myVector = {1, 2, 3, 4, 5};\n\n    // Using a function binder to add 5 to each element\n    std::transform(myVector.begin(), myVector.end(), myVector.begin(),\n        std::bind(std::plus&lt;int&gt;(), std::placeholders::_1, 5));\n\n    for (int i : myVector) {\n        std::cout &lt;&lt; i &lt;&lt; \" \";\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.3/CPP-STL/#4-example-applications","title":"4. Example Applications","text":"<p>Now that we've covered the basics of STL containers, algorithms, and functions, let's see how you can apply these concepts to real-world scenarios.</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.3/CPP-STL/#sorting-a-vector-of-integers","title":"Sorting a Vector of Integers","text":"<p>Suppose you have an unsorted vector of integers, and you want to sort it in ascending order:</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nint main() {\n    std::vector&lt;int&gt; numbers = {5, 1, 4, 2, 3};\n\n    // Sort the vector\n    std::sort(numbers.begin(), numbers.end());\n\n    // Print the sorted numbers\n    for (int num : numbers) {\n        std::cout &lt;&lt; num &lt;&lt; \" \";\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.3/CPP-STL/#using-map-for-data-storage","title":"Using Map for Data Storage","text":"<p>Imagine you need to store and retrieve data with associated keys. You can use a map for this purpose:</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\n\nint main() {\n    std::map&lt;std::string, int&gt; scores;\n\n    // Insert key-value pairs\n    scores[\"Alice\"] = 95;\n    scores[\"Bob\"] = 87;\n    scores[\"Charlie\"] = 92;\n\n    // Retrieve and print a specific score\n    std::cout &lt;&lt; \"Charlie's score: \" &lt;&lt; scores[\"Charlie\"] &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.3/CPP-STL/#solving-problems-with-algorithms","title":"Solving Problems with Algorithms","text":"<p>STL algorithms are incredibly versatile. Let's say you want to find the sum of all even numbers in a vector:</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nint main() {\n    std::vector&lt;int&gt; numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n\n    // Use std::accumulate with a lambda function\n    int sum = std::accumulate(numbers.begin(), numbers.end(), 0, \n        [](int acc, int val) { return val % 2 == 0 ? acc + val : acc; });\n\n    std::cout &lt;&lt; \"Sum of even numbers: \" &lt;&lt; sum &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.3/CPP-STL/#customizing-functionality-with-functors","title":"Customizing Functionality with Functors","text":"<p>Functors can be beneficial when you need to customize functionality in your code. Suppose you want to calculate the sum of squares of a vector of numbers:</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nstruct Square {\n    int operator()(int x) const {\n        return x * x;\n    }\n};\n\nint main() {\n    std::vector&lt;int&gt; numbers = {1, 2, 3, 4, 5};\n\n    Square square; // Create an instance of the functor\n\n    // Use std::transform with the functor\n    std::transform(numbers.begin(), numbers.end(), numbers.begin(), square);\n\n    for (int num : numbers) {\n        std::cout &lt;&lt; num &lt;&lt; \" \";\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.3/Video-Solution/","title":"Video Solution","text":"<code> Complete C++ STL </code>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.4/Armstrong-Numbers/","title":"Armstrong Numbers","text":"C++ Armstrong_Num.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nstring Armstrong_Num(int n){\n    int Num = n;\n    int armstrong_Num = 0;\n    int len = floor(log10(n) + 1);\n    while(n &gt; 0) {\n        int digit = n%10;\n        armstrong_Num += pow(digit, len);\n        n /= 10;\n    }\n    return armstrong_Num == Num ? \"true\" : \"false\";\n}\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    cout &lt;&lt; Armstrong_Num(n);\n    return 0;\n}\n</code></pre> <pre><code>Input: 1634 # (1)!\nOutput: true\n</code></pre> <ol> <li>\\(1^4 + 6^4 + 3^4 + 4^4 = 1634\\)</li> </ol>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.4/Check-Palindrome/","title":"Check Palindrome","text":"C++ check_Palindrome.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nstring check_Palindrome(int n){\n    int Num = n;\n    int reverse_Num = 0;\n    while(n &gt; 0) {\n        int digit = n%10;\n        reverse_Num = reverse_Num*10 + digit;\n        n /= 10;\n    }\n    return reverse_Num == Num ? \"true\" : \"false\";\n}\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    cout &lt;&lt; check_Palindrome(n);\n    return 0;\n}\n</code></pre> <p>Input: 1331  Output: true</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.4/Check-for-Prime/","title":"Check for Prime","text":""},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.4/Check-for-Prime/#method-1","title":"Method-1","text":"C++ check_Prime.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nstring check_Prime(int n){\n    for (int i = 2; i &lt; n; i++) {\n        if (n % i == 0) {\n            return \"false\";\n        }\n    }\n    return \"true\";\n}\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    cout &lt;&lt; check_Prime(n);\n    return 0;\n}\n</code></pre> <p>Input: 36  Output: false</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.4/Check-for-Prime/#method-2","title":"Method-2","text":"C++ check_Prime.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nstring check_Prime(int n){\n    for (int i = 2; i &lt; sqrt(n); i++) {\n        if (n % i == 0) {\n            return \"false\";\n        }\n    }\n    return \"true\";\n}\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    cout &lt;&lt; check_Prime(n);\n    return 0;\n}\n</code></pre> <p>Input: 36  Output: false</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.4/Count-Digits/","title":"Count Digits","text":""},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.4/Count-Digits/#method-1","title":"Method-1","text":"C++ countDigits.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint countDigits(int n){\n    int count = 0;\n    while(n &gt; 0) {\n        n /= 10;\n        count++;\n    }\n    return count;\n}\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    cout &lt;&lt; countDigits(n);\n    return 0;\n}\n</code></pre> <p>Input: 5432  Output: 4</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.4/Count-Digits/#method-2","title":"Method-2","text":"C++ countDigits.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint countDigits(int n){\n    int count = floor(log10(n) + 1);\n    return count;\n}\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    cout &lt;&lt; countDigits(n);\n    return 0;\n}\n</code></pre> <p>Input: 5432  Output: 4</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.4/GCD-and-LCM/","title":"GCD and LCM","text":""},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.4/GCD-and-LCM/#method-1","title":"Method-1","text":"C++ find_GCD-LCM.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint GCD(int a, int b){\n    int gcd = 0;\n    for (int i = 1; i &lt;= min(a, b); i++) {\n        if (a % i == 0 and b % i == 0) {\n            gcd = i;\n        }\n    }\n    return gcd;\n}\n\nint LCM(int a, int b){\n    int gcd = GCD(a, b);\n    int lcm = (a*b)/gcd;\n    return lcm;\n}\n\nint main() {\n    int a, b;\n    cin &gt;&gt; a &gt;&gt; b;\n    cout &lt;&lt; \"GCD: \" &lt;&lt; GCD(a, b) &lt;&lt; endl;\n    cout &lt;&lt; \"LCM: \" &lt;&lt; LCM(a, b) &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <p>Input: 5 10  Output: GCD: 5  LCM: 10</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.4/GCD-and-LCM/#method-2","title":"Method-2","text":"C++ find_GCD-LCM.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint GCD(int a, int b){\n    if (b == 0) {\n        return a;\n    }\n    return GCD(b, a % b);\n}\n\nint LCM(int a, int b){\n    int gcd = GCD(a, b);\n    int lcm = (a*b)/gcd;\n    return lcm;\n}\n\nint main() {\n    int a, b;\n    cin &gt;&gt; a &gt;&gt; b;\n    cout &lt;&lt; \"GCD: \" &lt;&lt; GCD(a, b) &lt;&lt; endl;\n    cout &lt;&lt; \"LCM: \" &lt;&lt; LCM(a, b) &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <p>Input: 5 10  Output: GCD: 5  LCM: 10</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.4/Print-all-Divisors/","title":"Print all Divisors","text":""},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.4/Print-all-Divisors/#method-1","title":"Method-1","text":"C++ print_Divisor.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid print_Divisor(int n){\n    cout &lt;&lt; \"All Divisors are: \";\n    for(int i=1; i&lt;=n; i++) {\n        if(n%i == 0) {\n            cout &lt;&lt; i &lt;&lt; \" \";\n        }\n    }\n    cout &lt;&lt; endl;\n}\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    print_Divisor(n);\n    return 0;\n}\n</code></pre> <p>Input: 36  Output: All Divisors are: 1 2 3 4 6 9 12 18 36</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.4/Print-all-Divisors/#method-2","title":"Method-2","text":"C++ print_Divisor.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid print_Divisor(int n){\n    cout &lt;&lt; \"All Divisors are: \";\n    for(int i=1; i&lt;=sqrt(n); i++) {\n        if(n%i == 0) {\n            cout &lt;&lt; i &lt;&lt; \" \";\n            if(i != n/i) {\n                cout &lt;&lt; n/i &lt;&lt; \" \"; \n            }\n        }\n    }\n    cout &lt;&lt; endl;\n}\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    print_Divisor(n);\n    return 0;\n}\n</code></pre> <p>Input: 36  Output: All Divisors are: 1 2 3 4 6 9 12 18 36</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.4/Reverse-a-Number/","title":"Reverse a Number","text":"C++ ReverseNumber.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint ReverseNumber(int n){\n    int reverse_Num = 0;\n    while(n &gt; 0) {\n        int digit = n%10;\n        reverse_Num = reverse_Num*10 + digit;\n        n /= 10;\n    }\n    return reverse_Num;\n}\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    cout &lt;&lt; ReverseNumber(n);\n    return 0;\n}\n</code></pre> <p>Input: 5432  Output: 2345</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.4/Video-Solution/","title":"Video Solution","text":"<code> Basic Maths for DSA </code>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.5/Check-if-a-string-is-palindrome-or-not/","title":"Check if a string is palindrome or not","text":"C++ check_Palindrome.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nstring check_Palindrome(string str, int start, int end){\n    if(end - start == 1 or start == end) {\n        return \"true\";\n    }\n    else if(str[start] == str[end]) {\n        return check_Palindrome(str, start+1, end-1);\n    }\n    else {\n        return \"false\";\n    }\n}\n\nint main() {\n    string str;\n    cin &gt;&gt; str;\n    int n = str.size();\n    cout &lt;&lt; check_Palindrome(str, 0, n-1);\n    return 0;\n}\n</code></pre> Output <pre><code>ABCDCBA\ntrue\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.5/Factorial-of-N-numbers/","title":"Factorial of N numbers","text":"C++ factorialOf_N_Numbers.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint factorialOf_N_Numbers(int n){\n    int fact = 1;\n    if(n==0)\n        return 1;\n    fact = n * factorialOf_N_Numbers(n-1);\n    return fact;\n}\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    cout &lt;&lt; factorialOf_N_Numbers(n);\n    return 0;\n}\n</code></pre> Output <pre><code>5\n120\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.5/Fibonacci-Number/","title":"Fibonacci Number","text":"C++ fibonacci.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint fibonacci(int n){\n    if(n == 0 or n == 1)\n        return n;\n    int fibb = fibonacci(n-1) + fibonacci(n-2);\n    return fibb;\n}\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    for(int i=0; i&lt;n; i++)\n        cout &lt;&lt; fibonacci(i) &lt;&lt;\" \";\n    return 0;\n}\n</code></pre> Output <pre><code>5\n0 1 1 2 3\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.5/Print-1-to-N/","title":"Print 1 to N","text":"C++ print_1toN.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid print_1toN(int n){\n    if(n==0)\n        return;\n    print_1toN(n-1);\n    cout &lt;&lt; n &lt;&lt; \" \";\n}\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    print_1toN(n);\n    return 0;\n}\n</code></pre> Output <pre><code>5\n1 2 3 4 5\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.5/Print-N-to-1/","title":"Print N to 1","text":"C++ print_Nto1.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid print_Nto1(int n){\n    if(n==0)\n        return;\n    cout &lt;&lt; n &lt;&lt; \" \";\n    print_Nto1(n-1);\n}\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    print_Nto1(n);\n    return 0;\n}\n</code></pre> Output <pre><code>5\n5 4 3 2 1\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.5/Print-Name-N-times/","title":"Print Name N times","text":"C++ print_Name.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid print_Name(int n){\n    if(n==0)\n        return;\n    cout &lt;&lt; \"Akash Singh\" &lt;&lt; endl;\n    print_Name(n-1);\n}\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    print_Name(n);\n    return 0;\n}\n</code></pre> Output <pre><code>5\nAkash Singh\nAkash Singh\nAkash Singh\nAkash Singh\nAkash Singh\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.5/Reverse-an-array/","title":"Reverse an array","text":"C++ reverse_Array.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid reverse_Array(int arr[], int start, int end){\n    if(start &lt; end) {\n        swap(arr[start], arr[end]);\n        reverse_Array(arr, start+1, end-1);\n    }\n}\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    int arr[n];\n    for(int i=0; i&lt;n; i++) {\n        cin &gt;&gt; arr[i];\n    }\n    reverse_Array(arr, 0, n-1);\n    for(int i=0; i&lt;n; i++) {\n        cout &lt;&lt; arr[i] &lt;&lt; \" \";\n    }\n    return 0;\n}\n</code></pre> Output <pre><code>5\n1 2 3 4 5\n5 4 3 2 1\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.5/Sum-of-first-N-numbers/","title":"Sum of first N numbers","text":"C++ sumOf_N_Numbers.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint sumOf_N_Numbers(int n){\n    int sum=0;\n    if(n==0)\n        return 0;\n    sum = n + sumOf_N_Numbers(n-1);\n    return sum;\n}\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    cout &lt;&lt; sumOf_N_Numbers(n);\n    return 0;\n}\n</code></pre> Output <pre><code>5\n15\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.5/Undestand-Recursion/","title":"Undestand Recursion","text":"<p>Recursion is a fundamental concept in computer science and programming that can be both fascinating and challenging for newcomers. It's a problem-solving technique where a function calls itself to solve a problem in smaller, more manageable steps. While recursion can be powerful, it can also be confusing for those who are new to it. In this blog post, we'll explore the concept of recursion, its benefits, and how to understand and implement it effectively.</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.5/Undestand-Recursion/#what-is-recursion","title":"What is Recursion?","text":"<p>Recursion is a problem-solving approach in which a function calls itself to solve smaller instances of the same problem. The primary idea behind recursion is to break a complex problem into simpler, identical subproblems until you reach a base case where the problem can be solved directly without further recursion.</p>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.5/Undestand-Recursion/#understanding-the-recursive-process","title":"Understanding the Recursive Process","text":"<p>To better comprehend recursion, let's break down the recursive process into its essential components:</p> <ol> <li> <p>Base Case: Every recursive function must have one or more base cases. These are the conditions under which the function terminates and returns a result. Without base cases, a recursive function would run indefinitely, causing a stack overflow.</p> </li> <li> <p>Recursive Case: In the recursive case, the function calls itself with a modified version of the original problem. This step is crucial because it eventually leads the function toward the base case(s).</p> </li> <li> <p>Progress Toward Base Case: In each recursive call, the problem should get closer to the base case. If not, the recursion might not terminate or might lead to inefficient solutions.</p> </li> </ol>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.5/Undestand-Recursion/#the-power-of-recursion","title":"The Power of Recursion","text":"<p>Recursion is a powerful tool in programming for several reasons:</p> <ol> <li> <p>Elegance: Recursive solutions can be elegant and more intuitive for certain problems, making the code easier to understand and maintain.</p> </li> <li> <p>Divide and Conquer: It's particularly useful for solving problems that can be divided into smaller, similar subproblems. Recursive algorithms often follow a \"divide and conquer\" strategy.</p> </li> <li> <p>Complexity Reduction: Recursive algorithms can simplify complex problems by breaking them into manageable pieces. This can lead to more efficient solutions in some cases.</p> </li> <li> <p>Versatility: Recursion can be applied to a wide range of problems, from mathematical calculations to traversing data structures and searching.</p> </li> </ol>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.5/Undestand-Recursion/#example-factorial-calculation","title":"Example: Factorial Calculation","text":"<p>Let's illustrate recursion with a classic example: calculating the factorial of a number. The factorial of a non-negative integer <code>n</code>, denoted as <code>n!</code>, is the product of all positive integers from 1 to <code>n</code>.</p> C++PythonJava <pre><code>#include &lt;iostream&gt;\n\n// Recursive function to calculate the factorial of a number\nint factorial(int n) {\n    // Base case: If n is 0 or 1, return 1\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    // Recursive case: n! = n * (n-1)!\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int n = 5;\n    int result = factorial(n);\n    std::cout &lt;&lt; \"Factorial of \" &lt;&lt; n &lt;&lt; \" is \" &lt;&lt; result &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre> <pre><code># Recursive function to calculate the factorial of a number\ndef factorial(n):\n    # Base case: If n is 0 or 1, return 1\n    if n == 0 or n == 1:\n        return 1\n    # Recursive case: n! = n * (n-1)!\n    return n * factorial(n - 1)\n\nn = 5\nresult = factorial(n)\nprint(f\"Factorial of {n} is {result}\")\n</code></pre> <pre><code>public class FactorialExample {\n    // Recursive function to calculate the factorial of a number\n    public static int factorial(int n) {\n        // Base case: If n is 0 or 1, return 1\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n        // Recursive case: n! = n * (n-1)!\n        return n * factorial(n - 1);\n    }\n\n    public static void main(String[] args) {\n        int n = 5;\n        int result = factorial(n);\n        System.out.println(\"Factorial of \" + n + \" is \" + result);\n    }\n}\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.5/Video-Solution/","title":"Video Solution","text":"<code> 1. Introduction to Recursion </code>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.6/Counting-Frequencies-of-Array-Elements/","title":"Counting Frequencies of Array Elements","text":""},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.6/Counting-Frequencies-of-Array-Elements/#method-1","title":"Method-1","text":"C++ count_Frequency.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid count_Frequency(int arr[], int n){\n    vector&lt;bool&gt; visited(n, false);\n    for (int i = 0; i &lt; n; i++) {\n        if (visited[i] == true) {\n            continue;\n        }\n        int count = 1;\n        for (int j = i + 1; j &lt; n; j++) {\n            if (arr[i] == arr[j]) {\n                visited[j] = true;\n                count++;\n            }\n        }\n        cout &lt;&lt; arr[i] &lt;&lt; \" \" &lt;&lt; count &lt;&lt; endl;\n    }\n}\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    int arr[n];\n    for(int i=0; i&lt;n; i++) {\n        cin &gt;&gt; arr[i];\n    }\n    count_Frequency(arr, n);\n    return 0;\n}\n</code></pre> Output <pre><code>6\n10 2 10 4 10 2\n10 3\n2 2\n4 1\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.6/Counting-Frequencies-of-Array-Elements/#method-2","title":"Method-2","text":"C++ count_Frequency.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid count_Frequency(int arr[], int n){\n    unordered_map&lt;int, int&gt; map;\n    for (int i = 0; i &lt; n; i++) {\n        map[arr[i]]++;\n    }\n    for (auto x : map) {\n        cout &lt;&lt; x.first &lt;&lt; \" \" &lt;&lt; x.second &lt;&lt; endl;\n    }\n}\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    int arr[n];\n    for(int i=0; i&lt;n; i++) {\n        cin &gt;&gt; arr[i];\n    }\n    count_Frequency(arr, n);\n    return 0;\n}\n</code></pre> Output <pre><code>6\n10 2 10 4 10 2\n10 3\n2 2\n4 1\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.6/Find-the-highest_lowest-frequency-element/","title":"Find the highest lowest frequency element","text":""},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.6/Find-the-highest_lowest-frequency-element/#method-1","title":"Method-1","text":"C++ count_Frequency.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid count_Frequency(int arr[], int n){\n    vector&lt;bool&gt; visited(n, false);\n    for (int i = 0; i &lt; n; i++) {\n        if (visited[i] == true) {\n            continue;\n        }\n        int count = 1, max_count=0;\n        for (int j = i + 1; j &lt; n; j++) {\n            if (arr[i] == arr[j]) {\n                visited[j] = true;\n                count++;\n            }\n        }\n        if (count &gt; maxcount) {\n            max_count = count;\n        }\n        cout &lt;&lt; \"Heighest Frequency = \" &lt;&lt; max_count;\n    }\n}\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    int arr[n];\n    for(int i=0; i&lt;n; i++) {\n        cin &gt;&gt; arr[i];\n    }\n    count_Frequency(arr, n);\n    return 0;\n}\n</code></pre> Output <pre><code>6\n10 2 10 4 10 2\nHeighest Frequency = 3\nLowest Frequency = 1\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.6/Find-the-highest_lowest-frequency-element/#method-2","title":"Method-2","text":"C++ count_Frequency.cpp <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid count_Frequency(int arr[], int n){\n    unordered_map&lt;int, int&gt; map;\n    for (int i = 0; i &lt; n; i++) {\n        map[arr[i]]++;\n    }\n    for (auto x : map) {\n        cout &lt;&lt; x.first &lt;&lt; \" \" &lt;&lt; x.second &lt;&lt; endl;\n    }\n    int max_count = 0, res = -1; \n    for (auto i : map) { \n        if (max_count &lt; i.second) { \n            res = i.first; \n            max_count = i.second; \n        } \n    }\n    cout &lt;&lt; \"Heighest Frequency = \" &lt;&lt; max_count;\n}\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    int arr[n];\n    for(int i=0; i&lt;n; i++) {\n        cin &gt;&gt; arr[i];\n    }\n    count_Frequency(arr, n);\n    return 0;\n}\n</code></pre> Output <pre><code>6\n10 2 10 4 10 2\nHeighest Frequency = 3\nLowest Frequency = 1\n</code></pre>"},{"location":"learning_resources/codepoint/striver_a2z_dsa_sheet_solution/step01/step1.6/Video-Solution/","title":"Video Solution","text":"<code> Hashing | Map </code>"},{"location":"learning_resources/codepoint/striver_core_sde_sheet_solution/operating_system/OS/","title":"Operating System","text":"1. What is the main purpose of an operating system? Discuss different types? <p>What is the main purpose of an operating system?</p> <p>An operating system (OS) is system software that manages computer hardware, software resources, and provides common services for computer programs. So it manages the computer\u2019s memory, processes, devices, files, and security aspects of the system. It also allows us to communicate with the computer without knowing how to speak the computer\u2019s language. Without an operating system, a computer is not useful.</p> <p>Types of operating system:</p> Batch OS <p>Batch OS</p> Distributed OS <p>Distributed OS</p> Multitasking OS <p>Multitasking OS</p> Network OS <p>Network OS</p> Real-Time OS <p>Real-Time OS</p> Mobile OS <p>Mobile OS</p> 2. What is a socket, kernel and monolithic kernel ? <p>Socket</p> <p>A socket is defined as an endpoint for communication, A pair of processes communicating over a network employ a pair of sockets ,one for each process. A socket is identified by an IP address concatenated with a port number.  The server waits for incoming client requests by listening to a specified port. Once a request is received, the server accepts a connection from the client socket to complete the connection.</p> <p>Kernel</p> <pre><code>Kernel is the central core component of an operating system that manages operations of computer and hardware. Kernel Establishes communication between user level application and hardware. Manages memory and CPU time. Decides state of incoming processes. Controls Disk, Memory, Task Management\n</code></pre> <p>Monolithic Kernel</p> <p>It is one of the types of kernel where all operating system services operate in kernel space. It has dependencies between system components. It has huge lines of code which is complex.</p> <p>Example</p> <p>Unix, Linux, Open VMS, XTS-400 etc.</p> 3. Difference between process and program and thread? Different types of process. <p>Process</p> <p>Process is an instance of an executing program. For example, we write our computer programs in a text file and when we execute this program, it becomes a process which performs all the tasks mentioned in the program.</p> <p>Program</p> <p>Program is a set of instructions to perform a certain task. Eg: chrome.exe, notepad.exe</p> <p>Thread</p> <p>Thread is a path of execution within a process. A thread is also known as a lightweight process. The idea is to achieve parallelism by dividing a process into multiple threads. For example,Word processor uses multiple threads: one thread to format the text, another thread to process inputs.</p> 4. Define virtual memory, thrashing, threads. <p>Virtual Memory</p> <p>A computer can address more memory than the amount physically installed on the system. This extra memory is actually called virtual memory and it is a section of a hard disk that\u2019s set up to emulate the computer\u2019s RAM. The main visible advantage of this scheme is that programs can be larger than physical memory. Virtual memory serves two purposes. First, it allows us to extend the use of physical memory by using a disk. Second, it allows us to have memory protection, because each virtual address is translated to a physical address.</p> <p>Thrashing</p> <p>Thrashing is a condition or a situation when the system is spending a major portion of its time in servicing the page faults, but the actual processing done is very negligible. High degree of multiprogramming(if number of processes keeps on increasing in the memory), lack of frames (if a process is allocated too few frames, then there will be too many and too frequent page faults) causes Thrashing.</p> <p>Threads</p> <p>A thread is a single sequential flow of execution of tasks of a process so it is also known as thread of execution or thread of control.</p> 5. What is RAID ? Different types. <p>RAID</p> <p>RAID, or \u201cRedundant Arrays of Independent Disks\u201d is a technique which makes use of a combination of multiple disks instead of using a single disk for increased performance, data redundancy or both.Data redundancy, although taking up extra space, adds to disk reliability. This means, in case of disk failure, if the same data is also backed up onto another disk, we can retrieve the data and go on with the operation.</p> 6. What is a deadlock? Different conditions to achieve a deadlock. <p>What is a deadlock</p> <p>A Deadlock is a situation where each of the computer processes waits for a resource which is being assigned to some other process. In this situation, none of the processes gets executed since the resource it needs is held by some other process which is also waiting for some other resource to be released.</p> <p>How deadlock is achieved</p> <p>Deadlock happens when Mutual exclusion, hold and wait, No preemption and circular wait occurs simultaneously.</p> <p>Necessary Conditions for deadlock</p> Mutual Exclusion <p>Mutual Exclusion</p> Hold and Wait <p>Hold and Wait</p> No preemption <p>No preemption</p> Circular Wait <p>Circular Wait</p> 7. What is fragmentation? Types of fragmentation. <p>Fragmentation</p> <p>An unwanted problem in the operating system in which the processes are loaded and unloaded from memory, and free memory space is fragmented. Processes can\u2019t be assigned to memory blocks due to their small size, and the memory blocks stay unused. It is also necessary to understand that as programs are loaded and deleted from memory, they generate free space or a hole in the memory. These small blocks cannot be allotted to new arriving processes, resulting in inefficient memory use.</p> <p>The conditions of fragmentation depend on the memory allocation system. As the process is loaded and unloaded from memory, these areas are fragmented into small pieces of memory that cannot be allocated to incoming processes. It is called fragmentation.</p> <p>Types of fragmentation</p> Internal <p>Internal</p> External <p>External</p> 8. What is spooling ? <p>Spooling</p> <p>SPOOL is an acronym for simultaneous peripheral operations online. Spooling is a process in which data is temporarily held to be used and executed by a device, program, or system.</p> <p>In spooling, there is no interaction between the I/O devices and the CPU. That means there is no need for the CPU to wait for the I/O operations to take place. Such operations take a long time to finish executing, so the CPU will not wait for them to finish.</p> <p>The biggest example of Spooling is printing. The documents which are to be printed are stored in the SPOOL and then added to the queue for printing. During this time, many processes can perform their operations and use the CPU without waiting while the printer executes the printing process on the documents one-by-one.</p> 9. What is semaphore and mutex (Differences might be asked)? Define Binary semaphore. <p>Semaphore</p> <p>Semaphore is simply a variable that is non-negative and shared between threads. A semaphore is a signaling mechanism, and a thread that is waiting on a semaphore can be signaled by another thread. </p> It uses two atomic operations <p>1) wait, </p> <p>2) signal </p> <p>for the process synchronization.</p> <p>A semaphore either allows or disallows access to the resource, which depends on how it is set up.</p> <p>Mutex</p> <p>The full form of Mutex is Mutual Exclusion Object. It is a special type of binary semaphore which used for controlling access to the shared resource. It includes a priority inheritance mechanism to avoid extended priority inversion problems. It allows current higher priority tasks to be kept in the blocked state for the shortest time possible. However, priority inheritance does not correct priority- inversion but only minimizes its effect.</p> 10. Belady\u2019s Anomaly <p>Belady\u2019s Anomals</p> <p>Belady\u2019s anomaly is the name given to the phenomenon where increasing the number of page frames results in an increase in the number of page faults for a given memory access pattern.</p> <p>Solution to fix Belady\u2019s Anomaly</p> <p>Implementing alternative page replacement algo helps eliminate Belady\u2019s Anomaly.. Use of stack based algorithms, such as Optimal Page Replacement Algorithm and Least Recently Used (LRU) algorithm, can eliminate the issue of increased page faults as these algorithms assign priority to pages</p> 11. Starving and Aging in OS <p>Starving/Starvation(also called Lived lock)</p> <p>Starvation is the problem that occurs when low priority processes get jammed for an unspecified time as the high priority processes keep executing. So starvation happens if a method is indefinitely delayed.</p> <p>Solution to Starvation</p> <p>Ageing is a technique of gradually increasing the priority of processes that wait in the system for a long time.</p> 12. Why does trashing occur? <p>High degree of multiprogramming(if number of processes keeps on increasing in the memory) , lack of frames(if a process is allocated too few frames, then there will be too many and too frequent page faults.) causes Thrashing.</p> 13. What is paging and why do we need it? <p>Paging</p> <p>Paging is a memory management scheme that eliminates the need for contiguous allocation of physical memory. This scheme permits the physical address space of a process to be non \u2013 contiguous.</p> <p>Why do we need it</p> <p>Paging is used for faster access to data. When a program needs a page, it is available in the main memory(RAM) as the OS copies a certain number of pages from your storage device to main memory. Paging allows the physical address space of a process to be noncontiguous.</p> 14. Demand Paging, Segmentation <p>Demand Paging</p> <p>Demand paging is a method of virtual memory management which is based on the principle that pages should only be brought into memory if the executing process demands them. This is often referred to as lazy evaluation as only those pages demanded by the process are swapped from secondary storage to main memory.</p> <p>So demand paging works opposite to the principle of loading all pages immediately.</p> <p>Segmentation</p> <p>Segmentation is a memory management technique in which the memory is divided into the variable size parts. Each part is known as a segment which can be allocated to a process.</p> <p>The details about each segment are stored in a table called a segment table. Segment table is stored in one (or many) of the segments.</p> <p>Segment table contains mainly two information about segment</p> Base <p>It is the base address of the segment</p> Limit <p>It is the length of the segment.</p> 15. Real Time Operating System, types of RTOS. <p>RTOS</p> <p>A real-time operating system (RTOS) is a special-purpose operating system used in computers that has strict time constraints for any job to be performed and is intended to serve real time applications that possess data as it comes in , typically without buffer delays.</p> <p>Types of RTOS</p> Hard RTOS <p>Hard RTOS</p> Firm RTOS <p>Firm RTOS</p> Soft RTOS <p>Soft RTOS</p> 16. Difference between main memory and secondary memory. <p>Primary / Main memory</p> <p>Primary memory is the computer memory that is directly accessible by CPU. It is comprised of DRAM and provides the actual working space to the processor. It holds the data and instructions that the processor is currently working on. </p> <p>Secondary Memory / Mass Storage</p> <p>The contents of the secondary memory first get transferred to the primary memory and then are accessed by the processor, this is because the processor does not directly interact with the secondary memory</p> 17. Static Binding, Dynamic Binding <p>Static binding happens when the code is compiled, while dynamic bind happens when the code is executed at run time.</p> <p>Static Binding</p> <p>When a compiler acknowledges all the information required to call a function or all the values of the variables during compile time, it is called \u201cstatic binding\u201d. As all the required information is known before runtime, it increases the program efficiency and it also enhances the speed of execution of a program. Static Binding makes a program very efficient, but it declines the program flexibility, as \u2018values of variable\u2019 and \u2018function calling\u2019 are predefined in the program. Static binding is implemented in a program at the time of coding. Overloading a function or an operator is the example of compile time polymorphism i.e. static binding.</p> <p>Dynamic Binding</p> <p>Dynamic Binding Calling a function or assigning a value to a variable, at run-time is called \u201cDynamic Binding\u201d. Dynamic binding can be associated with run time \u2018polymorphism\u2019 and \u2018inheritance\u2019 in OOP. Dynamic binding makes the execution of a program flexible as it can decide what value should be assigned to the variable and which function should be called, at the time of program execution. But as this information is provided at run time it makes the execution slower as compared to static binding.</p> 18. FCFS Scheduling <p>First Come First Serve (FCFS) Scheduling</p> <p>First Come First Serve (FCFS) is an operating system scheduling algorithm that automatically executes queued requests and processes in order of their arrival. It is the easiest and simplest CPU scheduling algorithm. In this type of algorithm, processes which requests the CPU first get the CPU allocation first. This is managed with a FIFO queue. The full form of FCFS is First Come First Serve.</p> <p>As the process enters the ready queue, its PCB (Process Control Block) is linked with the tail of the queue and, when the CPU becomes free, it should be assigned to the process at the beginning of the queue.</p> 19. SJF Scheduling <p>Shortest Job First (SJF) Scheduling</p> <p>Shortest Job First (SJF) is an algorithm in which the process having the smallest execution time is chosen for the next execution. This scheduling method can be preemptive or non-preemptive. It significantly reduces the average waiting time for other processes awaiting execution. The full form of SJF is Shortest Job First.</p> There are basically two types of SJF methods <p>Non-Preemptive SJF</p> <p>Non-Preemptive SJF</p> <p>Preemptive SJF</p> <p>Preemptive SJF</p> 20. SRTF Scheduling <p>SRTF Scheduling</p> <p>SRTF Scheduling is a preemptive version of SJF scheduling. In SRTF, the execution of the process can be stopped after a certain amount of time. At the arrival of every process, the short term scheduler schedules the process with the least remaining burst time among the list of available processes and the running process.</p> 21. LRTF Scheduling <p>LRTF Scheduling</p> <p>This is a preemptive version of Longest Job First (LJF) scheduling algorithm. In this scheduling algorithm, we find the process with the maximum remaining time and then process it. We check for the maximum remaining time after some interval of time(say 1 unit each) to check if another process having more Burst Time arrived up to that time.</p> 22. Priority Scheduling <p>Priority Scheduling</p> <p>Priority Scheduling is a method of scheduling processes that is based on priority. In this algorithm, the scheduler selects the tasks to work as per the priority.</p> <p>The processes with higher priority should be carried out first, whereas jobs with equal priorities are carried out on a round-robin or FCFS basis. Priority depends upon memory requirements, time requirements, etc.</p> 23. Round Robin Scheduling <p>Round Robin Scheduling</p> <p>In Round-robin scheduling, each ready task runs turn by turn only in a cyclic queue for a limited time slice. This algorithm also offers starvation free execution of processes. Widely used preemptive scheduling method in traditional OS. All the jobs get a fair allocation of CPU. Cons include : Finding a correct time quantum is a quite difficult task in this system, Round-robin scheduling doesn\u2019t give special priority to more important tasks.</p> 24. Producer Consumer Problem <p>About Producer-Consumer problem</p> <p>The Producer-Consumer problem is a classic problem that is used for multi-process synchronisation i.e. synchronisation between more than one processes.</p> <p>The job of the Producer is to generate the data, put it into the buffer, and again start generating data. While the job of the Consumer is to consume the data from the buffer.</p> <p>What\u2019s the problem here?</p> The following are the problems that might occur in the Producer-Consumer <p>The producer should produce data only when the buffer is not full. If the buffer is full, then the producer shouldn\u2019t be allowed to put any data into the buffer.</p> <p>The consumer should consume data only when the buffer is not empty. If the buffer is empty, then the consumer shouldn\u2019t be allowed to take any data from the buffer.</p> <p>The producer and consumer should not access the buffer at the same time.</p> <p>We can solve this problem by using semaphores.</p> 25. Banker\u2019s Algorithm <p>Banker\u2019s Algorithm</p> <p>It is a banker algorithm used to avoid deadlock and allocate resources safely to each process in the computer system. The \u2018S-State\u2019 examines all possible tests or activities before deciding whether the allocation should be allowed to each process. It also helps the operating system to successfully share the resources between all the processes. The banker\u2019s algorithm is named because it checks whether a person should be sanctioned a loan amount or not to help the bank system safely simulate allocation resources.</p> 26. Explain Cache <p>Cache</p> <p>Cache memory is an extremely fast memory type that acts as a buffer between RAM and the CPU. It holds frequently requested data and instructions so that they are immediately available to the CPU when needed.</p> 27. Difference between direct mapping, associative mapping and set-associative mapping <p>Direct Mapping</p> <p>In direct mapping cache, instead of storing total address information with data in cache only part of address bits is stored along with data. The new data has to be stored only in a specified cache location as per the mapping rule for direct mapping. So it doesn't need replacement algorithm.</p> <p>Associative Mapping</p> <p>In associative mapping both the address and data of the memory word are stored. The associative mapping method used by cache memory is very flexible one as well as very fast. This mapping method is also known as fully associative cache.</p> <p>Set-Associative Mapping</p> <p>In Set-Associative cache memory two or more words can be stored under the same index address.  Here every data word is stored along with its tag. The number of tag-data words under an index is said to form a text.</p> 28. Difference between multitasking and multiprocessing <p>Multi-tasking</p> <p>Multi-tasking is the logical extension of multiprogramming. In this system, the CPU executes multiple jobs by switching among them typically using a small time quantum, and these switches occur so frequently that the users can interact with each program while it is running. Multitasking is further classified into two categories: Single User &amp; Multiuser. </p> <p>Multiprocessing</p> <p>Multiprocessing is a system that has two or more than two processors. In this, CPUs are added for increasing computing speed of the system. Because of Multiprocessing, there are many processes that are executed simultaneously. Multiprocessing is further classified into two categories: Symmetric Multiprocessing and Asymmetric Multiprocessing. </p>"},{"location":"learning_resources/tags/tags/","title":"Tags","text":""},{"location":"learning_resources/tags/tags/#cn","title":"CN","text":"<ul> <li>Computer Network</li> </ul>"},{"location":"learning_resources/tags/tags/#core-subject","title":"Core Subject","text":"<ul> <li>Computer Network</li> <li>Database Management System</li> <li>Operating System</li> </ul>"},{"location":"learning_resources/tags/tags/#dbms","title":"DBMS","text":"<ul> <li>Database Management System</li> </ul>"},{"location":"learning_resources/tags/tags/#os","title":"OS","text":"<ul> <li>Operating System</li> </ul>"},{"location":"learning_resources/blog/archive/2023/","title":"2023","text":""},{"location":"learning_resources/blog/category/core_subjects/","title":"Core Subjects","text":""},{"location":"learning_resources/tags/tags/","title":"Tags","text":""},{"location":"learning_resources/tags/tags/#cn","title":"CN","text":"<ul> <li>Computer Network</li> </ul>"},{"location":"learning_resources/tags/tags/#core-subject","title":"Core Subject","text":"<ul> <li>Computer Network</li> <li>Database Management System</li> <li>Operating System</li> </ul>"},{"location":"learning_resources/tags/tags/#dbms","title":"DBMS","text":"<ul> <li>Database Management System</li> </ul>"},{"location":"learning_resources/tags/tags/#os","title":"OS","text":"<ul> <li>Operating System</li> </ul>"}]}